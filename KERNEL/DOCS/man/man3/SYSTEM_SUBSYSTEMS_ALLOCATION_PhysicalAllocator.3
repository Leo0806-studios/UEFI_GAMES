.TH "SYSTEM::SUBSYSTEMS::ALLOCATION::PhysicalAllocator" 3 "Version 0.0.01" "OSDEV" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SYSTEM::SUBSYSTEMS::ALLOCATION::PhysicalAllocator \- handles allocation of physical pages\&. for now relatively empty\&. its just in a class for later if i want to add specific state  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <ALLOCATION\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void * \fBAllocatePAge\fP ()"
.br
.RI "allocates a single page faster than AllocatePages for a single page as it does not have to do size checking returns a pointer to the first valid address inside the page\&. the offset from the beginning of the page is not stable and might change based on the format and size of the header information\&. don't rely on it "
.ti -1c
.RI "bool \fBFreePage\fP (void *ptr)"
.br
.RI "frees a single page\&. faster than FreePages as it doesn't have to do bounds checking\&. performs a check if the pointer is a valid page pinter\&. (at a offset that corresponds to the sizeof the header and some other checks)\&. if the pointer is invalid it will return false\&. nullptr is also invalid "
.ti -1c
.RI "void * \fBAllocatePages\fP (size_t amountOfPages)"
.br
.RI "Allocates a number of pages\&. returns a pointer to the first valid address inside the first page\&. the offset from the beginning of the page is not stable and might change based on the format and size of the header information\&. don't rely on it\&. "
.ti -1c
.RI "bool \fBFreePages\fP (void *ptr)"
.br
.RI "Frees memory pages previously allocated and returns whether the operation was successful\&. a return of false can also indicate memory corruption or an invalid pointer\&. "
.in -1c
.SH "Detailed Description"
.PP 
handles allocation of physical pages\&. for now relatively empty\&. its just in a class for later if i want to add specific state 
.PP
Definition at line \fB28\fP of file \fBALLOCATION\&.h\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "void * SYSTEM::SUBSYSTEMS::ALLOCATION::PhysicalAllocator::AllocatePAge ()\fR [nodiscard]\fP"

.PP
allocates a single page faster than AllocatePages for a single page as it does not have to do size checking returns a pointer to the first valid address inside the page\&. the offset from the beginning of the page is not stable and might change based on the format and size of the header information\&. don't rely on it 
.PP
\fBReturns\fP
.RS 4

.RE
.PP

.PP
Definition at line \fB13\fP of file \fBALLOCATION\&.cpp\fP\&.
.SS "void * SYSTEM::SUBSYSTEMS::ALLOCATION::PhysicalAllocator::AllocatePages (size_t amountOfPages)"

.PP
Allocates a number of pages\&. returns a pointer to the first valid address inside the first page\&. the offset from the beginning of the page is not stable and might change based on the format and size of the header information\&. don't rely on it\&. 
.PP
\fBParameters\fP
.RS 4
\fIamountOfPages\fP 
.RE
.PP
\fBReturns\fP
.RS 4
.RE
.PP

.PP
Definition at line \fB52\fP of file \fBALLOCATION\&.cpp\fP\&.
.SS "bool SYSTEM::SUBSYSTEMS::ALLOCATION::PhysicalAllocator::FreePage (void * ptr)\fR [nodiscard]\fP"

.PP
frees a single page\&. faster than FreePages as it doesn't have to do bounds checking\&. performs a check if the pointer is a valid page pinter\&. (at a offset that corresponds to the sizeof the header and some other checks)\&. if the pointer is invalid it will return false\&. nullptr is also invalid 
.PP
\fBParameters\fP
.RS 4
\fIptr\fP 
.RE
.PP

.PP
Definition at line \fB36\fP of file \fBALLOCATION\&.cpp\fP\&.
.SS "bool SYSTEM::SUBSYSTEMS::ALLOCATION::PhysicalAllocator::FreePages (void * ptr)"

.PP
Frees memory pages previously allocated and returns whether the operation was successful\&. a return of false can also indicate memory corruption or an invalid pointer\&. 
.PP
\fBParameters\fP
.RS 4
\fIptr\fP Pointer to the memory pages to be freed\&.
.RE
.PP
\fBReturns\fP
.RS 4
true if the pages were successfully freed; false otherwise\&.
.RE
.PP

.PP
Definition at line \fB92\fP of file \fBALLOCATION\&.cpp\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for OSDEV from the source code\&.
