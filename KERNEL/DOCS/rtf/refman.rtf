{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs12\cgrid \sbasedon0 \snext0 heading 6;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\*\listtable
{\list\listtemplateid1
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8662 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid1}
{\list\listtemplateid2
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid2}
{\list\listtemplateid3
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid3}
}
{\listoverridetable
{\listoverride\listid1\listoverridecount0\ls1}
{\listoverride\listid2\listoverridecount0\ls2}
{\listoverride\listid3\listoverridecount0\ls3}
}
{\info 
{\title {\comment OSDEV  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
0.0.01 \par
}}OSDEV}
{\comment Generated by doxygen 1.11.0.}
}\pard\plain 
\sectd\pgnlcrm
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\vertalc\qc\par\par\par\par\par\par\par
\pard\plain \s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid 
{\field\fldedit {\*\fldinst TITLE \\*MERGEFORMAT}{\fldrslt OSDEV}}\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\par
\par\par\par\par\par\par\par\par\par\par\par\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
{\field\fldedit {\*\fldinst AUTHOR \\*MERGEFORMAT}{\fldrslt AUTHOR}}\par
Version 0.0.01\par\page\page\vertalt
\pard\plain 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Table of Contents\par
\pard\plain \par
{\field\fldedit {\*\fldinst TOC \\f \\*MERGEFORMAT}{\fldrslt Table of contents}}\par
\pard\plain 
\sect \sbkpage \pgndec \pgnrestart
\sect \sectd \sbknone
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Namespace Index\par \pard\plain 
{\tc \v Namespace Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Namespace List\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here is a list of all documented namespaces with brief descriptions:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b SYSTEM::DRIVERS::PCI} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
All {\b PCI} driver are in this namespace })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b SYSTEM::STARTUP::GDT} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Everything {\b GDT} related is contained in this namespace. this include the {\b GDT} entries and functions like creating it and loading it. the {\b GDT} itself is stored in the N {\b SYSTEM_INFO} namespace })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b SYSTEM::STARTUP::PAGING} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Everything related to paging. also contains definition for the global page map })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b SYSTEM::SUBSYSTEMS::ALLOCATION} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Everything related to memory allocation is inside this namespace })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b SYSTEM::SUBSYSTEMS::CONSOLE} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\b Console} subsystem })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b SYSTEM::SUBSYSTEMS::RENDER::SIMPLE} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Simple render interface to be used in pre driver mode. all draw functions in this namespace are used to draw to the framebuffer directly })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b SYSTEM::SYSTEM_INFO} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This namespace contains system information that is collected during the boot process })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Class Index\par \pard\plain 
{\tc \v Class Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Class List\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here are the classes, structs, unions and interfaces with brief descriptions:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b SYSTEM::SUBSYSTEMS::CONSOLE::__CONSOLE__STRUCTURE} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b SYSTEM::SUBSYSTEMS::RENDER::SIMPLE::CHAR} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
16X8 hardcode char for a simple font used in the early stages of initialization of the kernel })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b SYSTEM::SUBSYSTEMS::CONSOLE::Console} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b SYSTEM::SUBSYSTEMS::CONSOLE::ConsoleInfo} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Information about the console })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b SYSTEM::STARTUP::GDT::GDT_ENTRY} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Entry inside the {\b GDT} })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b SYSTEM::STARTUP::PAGING::GlobalPageMap} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Structure of the global page map })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b SYSTEM::SUBSYSTEMS::ALLOCATION::PageHeader} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Header inserted onto a allocation allocated with the physical allocator. is in the beginning of the first page of the allocation. do not rely on its internal layout (for byte wise access) })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b SYSTEM::STARTUP::PAGING::PageMapEntry} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Represents an entry in a page map, containing information about a physical memory region })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b SYSTEM::SUBSYSTEMS::ALLOCATION::PhysicalAllocator} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Handles allocation of physical pages. for now relatively empty. its just in a class for later if i want to add specific state })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b SYSTEM::SUBSYSTEMS::RENDER::RenderState} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Render state class. a global singleton that holds the current render state })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b SYSTEM::SYSTEM_INFO::SystemInfo} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
System info is a global singleton that contains information about the system })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b SYSTEM::STARTUP::PAGING::UEFI_LEFTOWER} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
UEFI leftovers are all contained in there. this mainly includes information about the memory map })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
File Index\par \pard\plain 
{\tc \v File Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
File List\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here is a list of all documented files with brief descriptions:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b MAIN.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b HEADER/{\b NAMESPACE_DOCS.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b HEADER/DRIVERS/PCI/{\b PCI.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b HEADER/SAL/{\b SAL.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b HEADER/STARTUP/GDT/{\b GDT.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b HEADER/STARTUP/PAGE_MAP/{\b PAGE_MAP.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b HEADER/SUBSYSTEMS/ALLOCATION/{\b ALLOCATION.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b HEADER/SUBSYSTEMS/CONSOLE/{\b CONSOLE.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b HEADER/SUBSYSTEMS/RENDER/{\b RENDER.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b HEADER/SYTEM_INFO/{\b SYSTEM_INFO.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b SOURCE/DRIVERS/PCI/{\b PCI.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b SOURCE/STARTUP/PAGE_MAP/{\b PAGE_MAP.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b SOURCE/SUBSYSTEMS/ALLOCATION/{\b ALLOCATION.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b SOURCE/SUBSYSTEMS/CONSOLE/{\b CONSOLE.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b SOURCE/SUBSYSTEMS/RENDER/{\b RENDER.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b SOURCE/SYSTEM_INFO/{\b SYSTEM_INFO.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Namespace Documentation\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
SYSTEM::DRIVERS::PCI Namespace Reference\par \pard\plain 
{\tc\tcl2 \v SYSTEM::DRIVERS::PCI}
{\xe \v SYSTEM::DRIVERS::PCI}
{\bkmkstart AAAAAAAAAQ}
{\bkmkend AAAAAAAAAQ}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
all {\b PCI} driver are in this namespace }}\par
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
all {\b PCI} driver are in this namespace \par
}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
SYSTEM::STARTUP::GDT Namespace Reference\par \pard\plain 
{\tc\tcl2 \v SYSTEM::STARTUP::GDT}
{\xe \v SYSTEM::STARTUP::GDT}
{\bkmkstart AAAAAAAAAR}
{\bkmkend AAAAAAAAAR}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
everything {\b GDT} related is contained in this namespace. this include the {\b GDT} entries and functions like creating it and loading it. the {\b GDT} itself is stored in the N {\b SYSTEM_INFO} namespace. }}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b GDT_ENTRY}{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
entry inside the {\b GDT}. }}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
everything {\b GDT} related is contained in this namespace. this include the {\b GDT} entries and functions like creating it and loading it. the {\b GDT} itself is stored in the N {\b SYSTEM_INFO} namespace. \par
}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
SYSTEM::STARTUP::PAGING Namespace Reference\par \pard\plain 
{\tc\tcl2 \v SYSTEM::STARTUP::PAGING}
{\xe \v SYSTEM::STARTUP::PAGING}
{\bkmkstart AAAAAAAAAZ}
{\bkmkend AAAAAAAAAZ}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
contains everything related to paging. also contains definition for the global page map }}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b GlobalPageMap}{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
structure of the global page map. }}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b PageMapEntry}{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Represents an entry in a page map, containing information about a physical memory region. }}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b UEFI_LEFTOWER}{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
UEFI leftovers are all contained in there. this mainly includes information about the memory map. }}\par}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumerations\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum class {\b PageType} \{ {\b Free} = 0
, {\b MMIO} = 1
, {\b Allocated} = 2
, {\b EFI_Reserved} = 3
 \}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
types of pages in the global page table. everything above the specified types is reserved. don't depend on the order of the types as they may change in the future. }}\par}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b QueryInstalledRam} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
queries the installed ram. first run is slower than subsequent runs. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
contains everything related to paging. also contains definition for the global page map \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumeration Type Documentation\par
\pard\plain 
{\xe \v PageType\:SYSTEM::STARTUP::PAGING}
{\xe \v SYSTEM::STARTUP::PAGING\:PageType}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum class {\b SYSTEM::STARTUP::PAGING::PageType}{\f2 [strong]}}}
\par
{\bkmkstart AAAAAAAABA}
{\bkmkend AAAAAAAABA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
types of pages in the global page table. everything above the specified types is reserved. don't depend on the order of the types as they may change in the future. }}\par
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Enumerator:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v MMIO\:SYSTEM::STARTUP::PAGING}
{\xe \v SYSTEM::STARTUP::PAGING\:MMIO}
{\qr MMIO{\bkmkstart AAAAAAAABB}
{\bkmkend AAAAAAAABB}
\cell }{{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
memory mapped IO. this includes efi_memorymapedIO_port and port_space \par
}\cell }{\row }
{\xe \v Allocated\:SYSTEM::STARTUP::PAGING}
{\xe \v SYSTEM::STARTUP::PAGING\:Allocated}
{\qr Allocated{\bkmkstart AAAAAAAABC}
{\bkmkend AAAAAAAABC}
\cell }{{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
simple allocated memory. \par
}\cell }{\row }
{\xe \v EFI_Reserved\:SYSTEM::STARTUP::PAGING}
{\xe \v SYSTEM::STARTUP::PAGING\:EFI_Reserved}
{\qr EFI_Reserved{\bkmkstart AAAAAAAABD}
{\bkmkend AAAAAAAABD}
\cell }{{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
this is for now a catch all for every reserved type in the UEFI memory map translated into the global page table \par
}\cell }{\row }
}
{
Definition at line {\b 43} of file {\b PAGE_MAP.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v QueryInstalledRam\:SYSTEM::STARTUP::PAGING}
{\xe \v SYSTEM::STARTUP::PAGING\:QueryInstalledRam}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t SYSTEM::STARTUP::PAGING::QueryInstalledRam (){\f2 [extern]}}}
\par
{\bkmkstart AAAAAAAABE}
{\bkmkend AAAAAAAABE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
queries the installed ram. first run is slower than subsequent runs. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
amount of installed ram in bytes\par
}}}{
Definition at line {\b 18} of file {\b PAGE_MAP.cpp}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
SYSTEM::SUBSYSTEMS::ALLOCATION Namespace Reference\par \pard\plain 
{\tc\tcl2 \v SYSTEM::SUBSYSTEMS::ALLOCATION}
{\xe \v SYSTEM::SUBSYSTEMS::ALLOCATION}
{\bkmkstart AAAAAAAABN}
{\bkmkend AAAAAAAABN}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
everything related to memory allocation is inside this namespace }}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b PageHeader}{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
header inserted onto a allocation allocated with the physical allocator. is in the beginning of the first page of the allocation. do not rely on its internal layout (for byte wise access) }}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b PhysicalAllocator}{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
handles allocation of physical pages. for now relatively empty. its just in a class for later if i want to add specific state }}\par}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Typedefs\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b PageType} = {\b SYSTEM::STARTUP::PAGING::PageType}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
everything related to memory allocation is inside this namespace \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Typedef Documentation\par
\pard\plain 
{\xe \v PageType\:SYSTEM::SUBSYSTEMS::ALLOCATION}
{\xe \v SYSTEM::SUBSYSTEMS::ALLOCATION\:PageType}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using {\b SYSTEM::SUBSYSTEMS::ALLOCATION::PageType} = {\b SYSTEM::STARTUP::PAGING::PageType}}}
\par
{\bkmkstart AAAAAAAABO}
{\bkmkend AAAAAAAABO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 12} of file {\b ALLOCATION.cpp}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
SYSTEM::SUBSYSTEMS::CONSOLE Namespace Reference\par \pard\plain 
{\tc\tcl2 \v SYSTEM::SUBSYSTEMS::CONSOLE}
{\xe \v SYSTEM::SUBSYSTEMS::CONSOLE}
{\bkmkstart AAAAAAAABX}
{\bkmkend AAAAAAAABX}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
the console subsystem }}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b __CONSOLE__STRUCTURE}\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Console}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b ConsoleInfo}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
contains information about the console }}\par}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ConsoleInfo} {\b QueryConsoleInfo} ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
constexpr size_t {\b tabSize} = 4\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
the console subsystem \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v QueryConsoleInfo\:SYSTEM::SUBSYSTEMS::CONSOLE}
{\xe \v SYSTEM::SUBSYSTEMS::CONSOLE\:QueryConsoleInfo}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b ConsoleInfo} SYSTEM::SUBSYSTEMS::CONSOLE::QueryConsoleInfo ()}}
\par
{\bkmkstart AAAAAAAABY}
{\bkmkend AAAAAAAABY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 111} of file {\b CONSOLE.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v tabSize\:SYSTEM::SUBSYSTEMS::CONSOLE}
{\xe \v SYSTEM::SUBSYSTEMS::CONSOLE\:tabSize}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t SYSTEM::SUBSYSTEMS::CONSOLE::tabSize = 4{\f2 [inline]}, {\f2 [constexpr]}}}
\par
{\bkmkstart AAAAAAAABZ}
{\bkmkend AAAAAAAABZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 8} of file {\b CONSOLE.h}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
SYSTEM::SUBSYSTEMS::RENDER::SIMPLE Namespace Reference\par \pard\plain 
{\tc\tcl2 \v SYSTEM::SUBSYSTEMS::RENDER::SIMPLE}
{\xe \v SYSTEM::SUBSYSTEMS::RENDER::SIMPLE}
{\bkmkstart AAAAAAAADD}
{\bkmkend AAAAAAAADD}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
simple render interface to be used in pre driver mode. all draw functions in this namespace are used to draw to the framebuffer directly. }}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b CHAR}{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
represents a 16X8 hardcode char for a simple font used in the early stages of initialization of the kernel }}\par}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b SimpleDrawChar} (unsigned int x, unsigned int y, wchar_t c)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
draws a char to the framebuffer at the specified position. will pint a A if the char is not in the font. draws directly to the framebuffer. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b SimpleDrawString} (const wchar_t *str, unsigned int x, unsigned int y)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
draws a string to the framebuffer at the specified position. calls SimpleDrawChar for each char in the string. cant handle any control characters. treats every char as 10 pixels wide. does not handle wrapping }{
}\par
}\par}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned int * {\b FramebufferBase} = nullptr\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned int {\b FramebufferWidth} = 0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned int {\b FramebufferHeight} = 0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned int {\b PixelsPerScanline} = 0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b CHAR} {\b SimpleFont} [255]\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
a hardcode external font for now only contains the ASCII uppercase Latin letters }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b TranslationTable} [256]\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
simple render interface to be used in pre driver mode. all draw functions in this namespace are used to draw to the framebuffer directly. \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v SimpleDrawChar\:SYSTEM::SUBSYSTEMS::RENDER::SIMPLE}
{\xe \v SYSTEM::SUBSYSTEMS::RENDER::SIMPLE\:SimpleDrawChar}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void SYSTEM::SUBSYSTEMS::RENDER::SIMPLE::SimpleDrawChar (unsigned int x, unsigned int y, wchar_t c)}}
\par
{\bkmkstart AAAAAAAADE}
{\bkmkend AAAAAAAADE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
draws a char to the framebuffer at the specified position. will pint a A if the char is not in the font. draws directly to the framebuffer. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i x} \cell }{\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i y} \cell }{\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i c} \cell }{\cell }
{\row }
}
}{
Definition at line {\b 1130} of file {\b RENDER.cpp}.}\par
}
{\xe \v SimpleDrawString\:SYSTEM::SUBSYSTEMS::RENDER::SIMPLE}
{\xe \v SYSTEM::SUBSYSTEMS::RENDER::SIMPLE\:SimpleDrawString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void SYSTEM::SUBSYSTEMS::RENDER::SIMPLE::SimpleDrawString (const wchar_t * str, unsigned int x, unsigned int y)}}
\par
{\bkmkstart AAAAAAAADF}
{\bkmkend AAAAAAAADF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
draws a string to the framebuffer at the specified position. calls SimpleDrawChar for each char in the string. cant handle any control characters. treats every char as 10 pixels wide. does not handle wrapping }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i str} \cell }{\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i x} \cell }{\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i y} \cell }{\cell }
{\row }
}
}{
Definition at line {\b 1154} of file {\b RENDER.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v FramebufferBase\:SYSTEM::SUBSYSTEMS::RENDER::SIMPLE}
{\xe \v SYSTEM::SUBSYSTEMS::RENDER::SIMPLE\:FramebufferBase}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned int * SYSTEM::SUBSYSTEMS::RENDER::SIMPLE::FramebufferBase = nullptr}}
\par
{\bkmkstart AAAAAAAADG}
{\bkmkend AAAAAAAADG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 11} of file {\b RENDER.cpp}.}\par
}
{\xe \v FramebufferHeight\:SYSTEM::SUBSYSTEMS::RENDER::SIMPLE}
{\xe \v SYSTEM::SUBSYSTEMS::RENDER::SIMPLE\:FramebufferHeight}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned int SYSTEM::SUBSYSTEMS::RENDER::SIMPLE::FramebufferHeight = 0}}
\par
{\bkmkstart AAAAAAAADH}
{\bkmkend AAAAAAAADH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 13} of file {\b RENDER.cpp}.}\par
}
{\xe \v FramebufferWidth\:SYSTEM::SUBSYSTEMS::RENDER::SIMPLE}
{\xe \v SYSTEM::SUBSYSTEMS::RENDER::SIMPLE\:FramebufferWidth}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned int SYSTEM::SUBSYSTEMS::RENDER::SIMPLE::FramebufferWidth = 0}}
\par
{\bkmkstart AAAAAAAADI}
{\bkmkend AAAAAAAADI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 12} of file {\b RENDER.cpp}.}\par
}
{\xe \v PixelsPerScanline\:SYSTEM::SUBSYSTEMS::RENDER::SIMPLE}
{\xe \v SYSTEM::SUBSYSTEMS::RENDER::SIMPLE\:PixelsPerScanline}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned int SYSTEM::SUBSYSTEMS::RENDER::SIMPLE::PixelsPerScanline = 0}}
\par
{\bkmkstart AAAAAAAADJ}
{\bkmkend AAAAAAAADJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 14} of file {\b RENDER.cpp}.}\par
}
{\xe \v SimpleFont\:SYSTEM::SUBSYSTEMS::RENDER::SIMPLE}
{\xe \v SYSTEM::SUBSYSTEMS::RENDER::SIMPLE\:SimpleFont}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b SYSTEM::SUBSYSTEMS::RENDER::SIMPLE::CHAR} SYSTEM::SUBSYSTEMS::RENDER::SIMPLE::SimpleFont}}
\par
{\bkmkstart AAAAAAAADK}
{\bkmkend AAAAAAAADK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
a hardcode external font for now only contains the ASCII uppercase Latin letters }}\par
{
Definition at line {\b 16} of file {\b RENDER.cpp}.}\par
}
{\xe \v TranslationTable\:SYSTEM::SUBSYSTEMS::RENDER::SIMPLE}
{\xe \v SYSTEM::SUBSYSTEMS::RENDER::SIMPLE\:TranslationTable}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int SYSTEM::SUBSYSTEMS::RENDER::SIMPLE::TranslationTable[256]}}
\par
{\bkmkstart AAAAAAAADL}
{\bkmkend AAAAAAAADL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 1016} of file {\b RENDER.cpp}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
SYSTEM::SYSTEM_INFO Namespace Reference\par \pard\plain 
{\tc\tcl2 \v SYSTEM::SYSTEM_INFO}
{\xe \v SYSTEM::SYSTEM_INFO}
{\bkmkstart AAAAAAAADS}
{\bkmkend AAAAAAAADS}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
this namespace contains system information that is collected during the boot process. }}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b SystemInfo}{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
system info is a global singleton that contains information about the system }}\par}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b QueryCPUFrequency} ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b SYSTEM::STARTUP::PAGING::GlobalPageMap} {\b GlobalPageMap} = \{\}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
the global page map. this contains information about the usage of physical pages }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
this namespace contains system information that is collected during the boot process. \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v QueryCPUFrequency\:SYSTEM::SYSTEM_INFO}
{\xe \v SYSTEM::SYSTEM_INFO\:QueryCPUFrequency}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t SYSTEM::SYSTEM_INFO::QueryCPUFrequency (){\f2 [extern]}}}
\par
{\bkmkstart AAAAAAAADT}
{\bkmkend AAAAAAAADT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 37} of file {\b SYSTEM_INFO.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v GlobalPageMap\:SYSTEM::SYSTEM_INFO}
{\xe \v SYSTEM::SYSTEM_INFO\:GlobalPageMap}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b SYSTEM::STARTUP::PAGING::GlobalPageMap} SYSTEM::SYSTEM_INFO::GlobalPageMap = \{\}}}
\par
{\bkmkstart AAAAAAAADU}
{\bkmkend AAAAAAAADU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
the global page map. this contains information about the usage of physical pages }}\par
{
Definition at line {\b 10} of file {\b SYSTEM_INFO.cpp}.}\par
}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Class Documentation{\tc \v Class Documentation}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
SYSTEM::SUBSYSTEMS::CONSOLE::__CONSOLE__STRUCTURE Class Reference\par \pard\plain 
{\tc\tcl2 \v SYSTEM::SUBSYSTEMS::CONSOLE::__CONSOLE__STRUCTURE}
{\xe \v SYSTEM::SUBSYSTEMS::CONSOLE::__CONSOLE__STRUCTURE}
{\bkmkstart AAAAAAAACA}
{\bkmkend AAAAAAAACA}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b __CONSOLE__STRUCTURE} (const {\b __CONSOLE__STRUCTURE} &other)=delete{\bkmkstart AAAAAAAACB}
{\bkmkend AAAAAAAACB}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b __CONSOLE__STRUCTURE} ({\b __CONSOLE__STRUCTURE} &&other)=delete{\bkmkstart AAAAAAAACC}
{\bkmkend AAAAAAAACC}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b __CONSOLE__STRUCTURE} & {\b operator=} (const {\b __CONSOLE__STRUCTURE} &other)=delete{\bkmkstart AAAAAAAACD}
{\bkmkend AAAAAAAACD}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b __CONSOLE__STRUCTURE} & {\b operator=} ({\b __CONSOLE__STRUCTURE} &&other)=delete{\bkmkstart AAAAAAAACE}
{\bkmkend AAAAAAAACE}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char * {\b buffer} =nullptr\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b bufferSize} =0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b collums} = 0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b rows} = 0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b cursorPosRows} = 0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b cursorPosCollums} = 0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b pixelsPerRow} = 0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b pixxelsPerCollum} = 0\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Friends\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b Console::InitConsole} (size_t collums, size_t rows, size_t pixelsperRow, size_t pixelsperCollum){\bkmkstart AAAAAAAACF}
{\bkmkend AAAAAAAACF}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 12} of file {\b CONSOLE.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v buffer\:SYSTEM::SUBSYSTEMS::CONSOLE::__CONSOLE__STRUCTURE}
{\xe \v SYSTEM::SUBSYSTEMS::CONSOLE::__CONSOLE__STRUCTURE\:buffer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char* SYSTEM::SUBSYSTEMS::CONSOLE::__CONSOLE__STRUCTURE::buffer =nullptr}}
\par
{\bkmkstart AAAAAAAACG}
{\bkmkend AAAAAAAACG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 21} of file {\b CONSOLE.cpp}.}\par
}
{\xe \v bufferSize\:SYSTEM::SUBSYSTEMS::CONSOLE::__CONSOLE__STRUCTURE}
{\xe \v SYSTEM::SUBSYSTEMS::CONSOLE::__CONSOLE__STRUCTURE\:bufferSize}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t SYSTEM::SUBSYSTEMS::CONSOLE::__CONSOLE__STRUCTURE::bufferSize =0}}
\par
{\bkmkstart AAAAAAAACH}
{\bkmkend AAAAAAAACH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 22} of file {\b CONSOLE.cpp}.}\par
}
{\xe \v collums\:SYSTEM::SUBSYSTEMS::CONSOLE::__CONSOLE__STRUCTURE}
{\xe \v SYSTEM::SUBSYSTEMS::CONSOLE::__CONSOLE__STRUCTURE\:collums}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t SYSTEM::SUBSYSTEMS::CONSOLE::__CONSOLE__STRUCTURE::collums = 0}}
\par
{\bkmkstart AAAAAAAACI}
{\bkmkend AAAAAAAACI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 23} of file {\b CONSOLE.cpp}.}\par
}
{\xe \v cursorPosCollums\:SYSTEM::SUBSYSTEMS::CONSOLE::__CONSOLE__STRUCTURE}
{\xe \v SYSTEM::SUBSYSTEMS::CONSOLE::__CONSOLE__STRUCTURE\:cursorPosCollums}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t SYSTEM::SUBSYSTEMS::CONSOLE::__CONSOLE__STRUCTURE::cursorPosCollums = 0}}
\par
{\bkmkstart AAAAAAAACJ}
{\bkmkend AAAAAAAACJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 27} of file {\b CONSOLE.cpp}.}\par
}
{\xe \v cursorPosRows\:SYSTEM::SUBSYSTEMS::CONSOLE::__CONSOLE__STRUCTURE}
{\xe \v SYSTEM::SUBSYSTEMS::CONSOLE::__CONSOLE__STRUCTURE\:cursorPosRows}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t SYSTEM::SUBSYSTEMS::CONSOLE::__CONSOLE__STRUCTURE::cursorPosRows = 0}}
\par
{\bkmkstart AAAAAAAACK}
{\bkmkend AAAAAAAACK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 26} of file {\b CONSOLE.cpp}.}\par
}
{\xe \v pixelsPerRow\:SYSTEM::SUBSYSTEMS::CONSOLE::__CONSOLE__STRUCTURE}
{\xe \v SYSTEM::SUBSYSTEMS::CONSOLE::__CONSOLE__STRUCTURE\:pixelsPerRow}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t SYSTEM::SUBSYSTEMS::CONSOLE::__CONSOLE__STRUCTURE::pixelsPerRow = 0}}
\par
{\bkmkstart AAAAAAAACL}
{\bkmkend AAAAAAAACL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 29} of file {\b CONSOLE.cpp}.}\par
}
{\xe \v pixxelsPerCollum\:SYSTEM::SUBSYSTEMS::CONSOLE::__CONSOLE__STRUCTURE}
{\xe \v SYSTEM::SUBSYSTEMS::CONSOLE::__CONSOLE__STRUCTURE\:pixxelsPerCollum}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t SYSTEM::SUBSYSTEMS::CONSOLE::__CONSOLE__STRUCTURE::pixxelsPerCollum = 0}}
\par
{\bkmkstart AAAAAAAACM}
{\bkmkend AAAAAAAACM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 30} of file {\b CONSOLE.cpp}.}\par
}
{\xe \v rows\:SYSTEM::SUBSYSTEMS::CONSOLE::__CONSOLE__STRUCTURE}
{\xe \v SYSTEM::SUBSYSTEMS::CONSOLE::__CONSOLE__STRUCTURE\:rows}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t SYSTEM::SUBSYSTEMS::CONSOLE::__CONSOLE__STRUCTURE::rows = 0}}
\par
{\bkmkstart AAAAAAAACN}
{\bkmkend AAAAAAAACN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 24} of file {\b CONSOLE.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
SOURCE/SUBSYSTEMS/CONSOLE/CONSOLE.cpp\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
SYSTEM::SUBSYSTEMS::RENDER::SIMPLE::CHAR Struct Reference\par \pard\plain 
{\tc\tcl2 \v SYSTEM::SUBSYSTEMS::RENDER::SIMPLE::CHAR}
{\xe \v SYSTEM::SUBSYSTEMS::RENDER::SIMPLE::CHAR}
{\bkmkstart AAAAAAAADM}
{\bkmkend AAAAAAAADM}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
represents a 16X8 hardcode char for a simple font used in the early stages of initialization of the kernel }}\par
{
{\f2 #include <RENDER.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char {\b c}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned char {\b width}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
the actual width of the char. can be used to improve spacing between characters }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned char {\b height}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
the actual height of the char. can be used to improve spacing between characters }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned int {\b Color}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
the colour of the char }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned char {\b BMP} [16]\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
bitmap of the char. max char size is 16X8 }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
represents a 16X8 hardcode char for a simple font used in the early stages of initialization of the kernel \par
}{
Definition at line {\b 17} of file {\b RENDER.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v BMP\:SYSTEM::SUBSYSTEMS::RENDER::SIMPLE::CHAR}
{\xe \v SYSTEM::SUBSYSTEMS::RENDER::SIMPLE::CHAR\:BMP}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned char SYSTEM::SUBSYSTEMS::RENDER::SIMPLE::CHAR::BMP[16]}}
\par
{\bkmkstart AAAAAAAADN}
{\bkmkend AAAAAAAADN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
bitmap of the char. max char size is 16X8 }}\par
{
Definition at line {\b 36} of file {\b RENDER.h}.}\par
}
{\xe \v c\:SYSTEM::SUBSYSTEMS::RENDER::SIMPLE::CHAR}
{\xe \v SYSTEM::SUBSYSTEMS::RENDER::SIMPLE::CHAR\:c}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char SYSTEM::SUBSYSTEMS::RENDER::SIMPLE::CHAR::c}}
\par
{\bkmkstart AAAAAAAADO}
{\bkmkend AAAAAAAADO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 18} of file {\b RENDER.h}.}\par
}
{\xe \v Color\:SYSTEM::SUBSYSTEMS::RENDER::SIMPLE::CHAR}
{\xe \v SYSTEM::SUBSYSTEMS::RENDER::SIMPLE::CHAR\:Color}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned int SYSTEM::SUBSYSTEMS::RENDER::SIMPLE::CHAR::Color}}
\par
{\bkmkstart AAAAAAAADP}
{\bkmkend AAAAAAAADP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
the colour of the char }}\par
{
Definition at line {\b 32} of file {\b RENDER.h}.}\par
}
{\xe \v height\:SYSTEM::SUBSYSTEMS::RENDER::SIMPLE::CHAR}
{\xe \v SYSTEM::SUBSYSTEMS::RENDER::SIMPLE::CHAR\:height}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned char SYSTEM::SUBSYSTEMS::RENDER::SIMPLE::CHAR::height}}
\par
{\bkmkstart AAAAAAAADQ}
{\bkmkend AAAAAAAADQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
the actual height of the char. can be used to improve spacing between characters }}\par
{
Definition at line {\b 26} of file {\b RENDER.h}.}\par
}
{\xe \v width\:SYSTEM::SUBSYSTEMS::RENDER::SIMPLE::CHAR}
{\xe \v SYSTEM::SUBSYSTEMS::RENDER::SIMPLE::CHAR\:width}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned char SYSTEM::SUBSYSTEMS::RENDER::SIMPLE::CHAR::width}}
\par
{\bkmkstart AAAAAAAADR}
{\bkmkend AAAAAAAADR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
the actual width of the char. can be used to improve spacing between characters }}\par
{
Definition at line {\b 22} of file {\b RENDER.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
HEADER/SUBSYSTEMS/RENDER/RENDER.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
SYSTEM::SUBSYSTEMS::CONSOLE::Console Class Reference\par \pard\plain 
{\tc\tcl2 \v SYSTEM::SUBSYSTEMS::CONSOLE::Console}
{\xe \v SYSTEM::SUBSYSTEMS::CONSOLE::Console}
{\bkmkstart AAAAAAAACO}
{\bkmkend AAAAAAAACO}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static bool {\b InitConsole} (size_t collums, size_t rows, size_t pixelsperRow, size_t pixelsperCollum)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Initializes the console. must be called before any other console function can safely be used. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static void {\b WriteLine} (const wchar_t *str)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
writes a line to the console out }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static void {\b WriteF} (size_t args, const char *format,...)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
analog to printf. takes a format string and a variable amount of input additionally it takes the amount of extra args as a parameter to increase safety }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static void {\b Write} (const wchar_t *str)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
writes an unformatted string to the console. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static const {\b ConsoleInfo} {\b QueryConsoleInfo} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
returns a instance of {\b ConsoleInfo} containing information about the console }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static void {\b ClearConsole} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
clears the console and moves the cursor to 0,0 }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static void {\b Flush} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
flushes the console buffer to the screen does nothing in early stages while rendering draws directly to the framebuffer }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static bool {\b ToggleANSICodes} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
toggles if the console should use ANSICodes or not. this is used to enable or disable color and other formatting codes. returns true if the codes are now enabled, false if they are now disabled. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 24} of file {\b CONSOLE.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v ClearConsole\:SYSTEM::SUBSYSTEMS::CONSOLE::Console}
{\xe \v SYSTEM::SUBSYSTEMS::CONSOLE::Console\:ClearConsole}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void SYSTEM::SUBSYSTEMS::CONSOLE::Console::ClearConsole (){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAACP}
{\bkmkend AAAAAAAACP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
clears the console and moves the cursor to 0,0 }}\par
{
Definition at line {\b 115} of file {\b CONSOLE.cpp}.}\par
}
{\xe \v Flush\:SYSTEM::SUBSYSTEMS::CONSOLE::Console}
{\xe \v SYSTEM::SUBSYSTEMS::CONSOLE::Console\:Flush}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void SYSTEM::SUBSYSTEMS::CONSOLE::Console::Flush (){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAACQ}
{\bkmkend AAAAAAAACQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
flushes the console buffer to the screen does nothing in early stages while rendering draws directly to the framebuffer }}\par
{
Definition at line {\b 118} of file {\b CONSOLE.cpp}.}\par
}
{\xe \v InitConsole\:SYSTEM::SUBSYSTEMS::CONSOLE::Console}
{\xe \v SYSTEM::SUBSYSTEMS::CONSOLE::Console\:InitConsole}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool SYSTEM::SUBSYSTEMS::CONSOLE::Console::InitConsole (size_t collums, size_t rows, size_t pixelsperRow, size_t pixelsperCollum){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAACR}
{\bkmkend AAAAAAAACR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Initializes the console. must be called before any other console function can safely be used. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i collums} \cell }{amount of columns to use. does nothing currently\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i rows} \cell }{amount of rows. does nothing currently\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i pixelsperRow} \cell }{influences vertical spacing should larger than the max size of a character or clipping might occur.\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i pixelsperCollum} \cell }{influences horizontal spacing. should be larger than the width o a character or clipping might occur\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
success is true\par
}}}{
Definition at line {\b 69} of file {\b CONSOLE.cpp}.}\par
}
{\xe \v QueryConsoleInfo\:SYSTEM::SUBSYSTEMS::CONSOLE::Console}
{\xe \v SYSTEM::SUBSYSTEMS::CONSOLE::Console\:QueryConsoleInfo}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
static const {\b ConsoleInfo} SYSTEM::SUBSYSTEMS::CONSOLE::Console::QueryConsoleInfo (){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAACS}
{\bkmkend AAAAAAAACS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
returns a instance of {\b ConsoleInfo} containing information about the console }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
\par
}}}}
{\xe \v ToggleANSICodes\:SYSTEM::SUBSYSTEMS::CONSOLE::Console}
{\xe \v SYSTEM::SUBSYSTEMS::CONSOLE::Console\:ToggleANSICodes}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool SYSTEM::SUBSYSTEMS::CONSOLE::Console::ToggleANSICodes (){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAACT}
{\bkmkend AAAAAAAACT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
toggles if the console should use ANSICodes or not. this is used to enable or disable color and other formatting codes. returns true if the codes are now enabled, false if they are now disabled. }}\par
{
Definition at line {\b 121} of file {\b CONSOLE.cpp}.}\par
}
{\xe \v Write\:SYSTEM::SUBSYSTEMS::CONSOLE::Console}
{\xe \v SYSTEM::SUBSYSTEMS::CONSOLE::Console\:Write}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void SYSTEM::SUBSYSTEMS::CONSOLE::Console::Write (const wchar_t * str){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAACU}
{\bkmkend AAAAAAAACU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
writes an unformatted string to the console. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i str} \cell }{\cell }
{\row }
}
}{
Definition at line {\b 93} of file {\b CONSOLE.cpp}.}\par
}
{\xe \v WriteF\:SYSTEM::SUBSYSTEMS::CONSOLE::Console}
{\xe \v SYSTEM::SUBSYSTEMS::CONSOLE::Console\:WriteF}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void SYSTEM::SUBSYSTEMS::CONSOLE::Console::WriteF (size_t args, const char * format,  ...){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAACV}
{\bkmkend AAAAAAAACV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
analog to printf. takes a format string and a variable amount of input additionally it takes the amount of extra args as a parameter to increase safety }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i format} \cell }{\cell }
{\row }
}
}{
Definition at line {\b 87} of file {\b CONSOLE.cpp}.}\par
}
{\xe \v WriteLine\:SYSTEM::SUBSYSTEMS::CONSOLE::Console}
{\xe \v SYSTEM::SUBSYSTEMS::CONSOLE::Console\:WriteLine}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void SYSTEM::SUBSYSTEMS::CONSOLE::Console::WriteLine (const wchar_t * str){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAACW}
{\bkmkend AAAAAAAACW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
writes a line to the console out }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i str} \cell }{\cell }
{\row }
}
}{
Definition at line {\b 78} of file {\b CONSOLE.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
HEADER/SUBSYSTEMS/CONSOLE/CONSOLE.h\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
SOURCE/SUBSYSTEMS/CONSOLE/CONSOLE.cpp\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
SYSTEM::SUBSYSTEMS::CONSOLE::ConsoleInfo Struct Reference\par \pard\plain 
{\tc\tcl2 \v SYSTEM::SUBSYSTEMS::CONSOLE::ConsoleInfo}
{\xe \v SYSTEM::SUBSYSTEMS::CONSOLE::ConsoleInfo}
{\bkmkstart AAAAAAAACX}
{\bkmkend AAAAAAAACX}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
contains information about the console }}\par
{
{\f2 #include <CONSOLE.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b buffer}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b collums}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b rows}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b scrollingEnabled}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
contains information about the console \par
}{
Definition at line {\b 13} of file {\b CONSOLE.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v buffer\:SYSTEM::SUBSYSTEMS::CONSOLE::ConsoleInfo}
{\xe \v SYSTEM::SUBSYSTEMS::CONSOLE::ConsoleInfo\:buffer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t SYSTEM::SUBSYSTEMS::CONSOLE::ConsoleInfo::buffer}}
\par
{\bkmkstart AAAAAAAACY}
{\bkmkend AAAAAAAACY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 17} of file {\b CONSOLE.h}.}\par
}
{\xe \v collums\:SYSTEM::SUBSYSTEMS::CONSOLE::ConsoleInfo}
{\xe \v SYSTEM::SUBSYSTEMS::CONSOLE::ConsoleInfo\:collums}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t SYSTEM::SUBSYSTEMS::CONSOLE::ConsoleInfo::collums}}
\par
{\bkmkstart AAAAAAAACZ}
{\bkmkend AAAAAAAACZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 18} of file {\b CONSOLE.h}.}\par
}
{\xe \v rows\:SYSTEM::SUBSYSTEMS::CONSOLE::ConsoleInfo}
{\xe \v SYSTEM::SUBSYSTEMS::CONSOLE::ConsoleInfo\:rows}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t SYSTEM::SUBSYSTEMS::CONSOLE::ConsoleInfo::rows}}
\par
{\bkmkstart AAAAAAAADA}
{\bkmkend AAAAAAAADA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 19} of file {\b CONSOLE.h}.}\par
}
{\xe \v scrollingEnabled\:SYSTEM::SUBSYSTEMS::CONSOLE::ConsoleInfo}
{\xe \v SYSTEM::SUBSYSTEMS::CONSOLE::ConsoleInfo\:scrollingEnabled}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool SYSTEM::SUBSYSTEMS::CONSOLE::ConsoleInfo::scrollingEnabled}}
\par
{\bkmkstart AAAAAAAADB}
{\bkmkend AAAAAAAADB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 20} of file {\b CONSOLE.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
HEADER/SUBSYSTEMS/CONSOLE/CONSOLE.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
SYSTEM::STARTUP::GDT::GDT_ENTRY Struct Reference\par \pard\plain 
{\tc\tcl2 \v SYSTEM::STARTUP::GDT::GDT_ENTRY}
{\xe \v SYSTEM::STARTUP::GDT::GDT_ENTRY}
{\bkmkstart AAAAAAAAAS}
{\bkmkend AAAAAAAAAS}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
entry inside the {\b GDT}. }}\par
{
{\f2 #include <GDT.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned short {\b limit}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned short {\b base}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned char {\b _base}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned char {\b accses_byte}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned char {\b limit_flags}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned char {\b __base}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
entry inside the {\b GDT}. \par
}{
Definition at line {\b 14} of file {\b GDT.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v __base\:SYSTEM::STARTUP::GDT::GDT_ENTRY}
{\xe \v SYSTEM::STARTUP::GDT::GDT_ENTRY\:__base}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned char SYSTEM::STARTUP::GDT::GDT_ENTRY::__base}}
\par
{\bkmkstart AAAAAAAAAT}
{\bkmkend AAAAAAAAAT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 20} of file {\b GDT.h}.}\par
}
{\xe \v _base\:SYSTEM::STARTUP::GDT::GDT_ENTRY}
{\xe \v SYSTEM::STARTUP::GDT::GDT_ENTRY\:_base}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned char SYSTEM::STARTUP::GDT::GDT_ENTRY::_base}}
\par
{\bkmkstart AAAAAAAAAU}
{\bkmkend AAAAAAAAAU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 17} of file {\b GDT.h}.}\par
}
{\xe \v accses_byte\:SYSTEM::STARTUP::GDT::GDT_ENTRY}
{\xe \v SYSTEM::STARTUP::GDT::GDT_ENTRY\:accses_byte}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned char SYSTEM::STARTUP::GDT::GDT_ENTRY::accses_byte}}
\par
{\bkmkstart AAAAAAAAAV}
{\bkmkend AAAAAAAAAV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 18} of file {\b GDT.h}.}\par
}
{\xe \v base\:SYSTEM::STARTUP::GDT::GDT_ENTRY}
{\xe \v SYSTEM::STARTUP::GDT::GDT_ENTRY\:base}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned short SYSTEM::STARTUP::GDT::GDT_ENTRY::base}}
\par
{\bkmkstart AAAAAAAAAW}
{\bkmkend AAAAAAAAAW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 16} of file {\b GDT.h}.}\par
}
{\xe \v limit\:SYSTEM::STARTUP::GDT::GDT_ENTRY}
{\xe \v SYSTEM::STARTUP::GDT::GDT_ENTRY\:limit}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned short SYSTEM::STARTUP::GDT::GDT_ENTRY::limit}}
\par
{\bkmkstart AAAAAAAAAX}
{\bkmkend AAAAAAAAAX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 15} of file {\b GDT.h}.}\par
}
{\xe \v limit_flags\:SYSTEM::STARTUP::GDT::GDT_ENTRY}
{\xe \v SYSTEM::STARTUP::GDT::GDT_ENTRY\:limit_flags}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned char SYSTEM::STARTUP::GDT::GDT_ENTRY::limit_flags}}
\par
{\bkmkstart AAAAAAAAAY}
{\bkmkend AAAAAAAAAY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 19} of file {\b GDT.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
HEADER/STARTUP/GDT/GDT.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
SYSTEM::STARTUP::PAGING::GlobalPageMap Class Reference\par \pard\plain 
{\tc\tcl2 \v SYSTEM::STARTUP::PAGING::GlobalPageMap}
{\xe \v SYSTEM::STARTUP::PAGING::GlobalPageMap}
{\bkmkstart AAAAAAAABF}
{\bkmkend AAAAAAAABF}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
structure of the global page map. }}\par
{
{\f2 #include <PAGE_MAP.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static bool {\b AllocatePageMap} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
allocated the global page map and translates the UEFI memory map into it. every that is not EfiConventionalMemory is considered reserved. all memory-mapped IO is considered MMIO. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
structure of the global page map. \par
}{
Definition at line {\b 79} of file {\b PAGE_MAP.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v AllocatePageMap\:SYSTEM::STARTUP::PAGING::GlobalPageMap}
{\xe \v SYSTEM::STARTUP::PAGING::GlobalPageMap\:AllocatePageMap}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool SYSTEM::STARTUP::PAGING::GlobalPageMap::AllocatePageMap (){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAABG}
{\bkmkend AAAAAAAABG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
allocated the global page map and translates the UEFI memory map into it. every that is not EfiConventionalMemory is considered reserved. all memory-mapped IO is considered MMIO. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
success is true\par
}}}{
Definition at line {\b 39} of file {\b PAGE_MAP.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
HEADER/STARTUP/PAGE_MAP/PAGE_MAP.h\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
SOURCE/STARTUP/PAGE_MAP/PAGE_MAP.cpp\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
SYSTEM::SUBSYSTEMS::ALLOCATION::PageHeader Struct Reference\par \pard\plain 
{\tc\tcl2 \v SYSTEM::SUBSYSTEMS::ALLOCATION::PageHeader}
{\xe \v SYSTEM::SUBSYSTEMS::ALLOCATION::PageHeader}
{\bkmkstart AAAAAAAABP}
{\bkmkend AAAAAAAABP}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
header inserted onto a allocation allocated with the physical allocator. is in the beginning of the first page of the allocation. do not rely on its internal layout (for byte wise access) }}\par
{
{\f2 #include <ALLOCATION.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b amoutofPages} = 0\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
default to zero for error catching }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void * {\b usable} = nullptr\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
pointer to the usable area. this is used for error checking }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
header inserted onto a allocation allocated with the physical allocator. is in the beginning of the first page of the allocation. do not rely on its internal layout (for byte wise access) \par
}{
Definition at line {\b 13} of file {\b ALLOCATION.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v amoutofPages\:SYSTEM::SUBSYSTEMS::ALLOCATION::PageHeader}
{\xe \v SYSTEM::SUBSYSTEMS::ALLOCATION::PageHeader\:amoutofPages}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t SYSTEM::SUBSYSTEMS::ALLOCATION::PageHeader::amoutofPages = 0}}
\par
{\bkmkstart AAAAAAAABQ}
{\bkmkend AAAAAAAABQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
default to zero for error catching }}\par
{
Definition at line {\b 17} of file {\b ALLOCATION.h}.}\par
}
{\xe \v usable\:SYSTEM::SUBSYSTEMS::ALLOCATION::PageHeader}
{\xe \v SYSTEM::SUBSYSTEMS::ALLOCATION::PageHeader\:usable}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void* SYSTEM::SUBSYSTEMS::ALLOCATION::PageHeader::usable = nullptr}}
\par
{\bkmkstart AAAAAAAABR}
{\bkmkend AAAAAAAABR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
pointer to the usable area. this is used for error checking }}\par
{
Definition at line {\b 21} of file {\b ALLOCATION.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
HEADER/SUBSYSTEMS/ALLOCATION/ALLOCATION.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
SYSTEM::STARTUP::PAGING::PageMapEntry Class Reference\par \pard\plain 
{\tc\tcl2 \v SYSTEM::STARTUP::PAGING::PageMapEntry}
{\xe \v SYSTEM::STARTUP::PAGING::PageMapEntry}
{\bkmkstart AAAAAAAABH}
{\bkmkend AAAAAAAABH}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Represents an entry in a page map, containing information about a physical memory region. }}\par
{
{\f2 #include <PAGE_MAP.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Friends\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b GlobalPageMap}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
the global page map. this contains information about the usage of physical pages }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Represents an entry in a page map, containing information about a physical memory region. \par
}{
Definition at line {\b 63} of file {\b PAGE_MAP.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Friends And Related Symbol Documentation\par
\pard\plain 
{\xe \v GlobalPageMap\:SYSTEM::STARTUP::PAGING::PageMapEntry}
{\xe \v SYSTEM::STARTUP::PAGING::PageMapEntry\:GlobalPageMap}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
friend class {\b GlobalPageMap}{\f2 [friend]}}}
\par
{\bkmkstart AAAAAAAABI}
{\bkmkend AAAAAAAABI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
the global page map. this contains information about the usage of physical pages }}\par
{
Definition at line {\b 64} of file {\b PAGE_MAP.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
HEADER/STARTUP/PAGE_MAP/PAGE_MAP.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
SYSTEM::SUBSYSTEMS::ALLOCATION::PhysicalAllocator Class Reference\par \pard\plain 
{\tc\tcl2 \v SYSTEM::SUBSYSTEMS::ALLOCATION::PhysicalAllocator}
{\xe \v SYSTEM::SUBSYSTEMS::ALLOCATION::PhysicalAllocator}
{\bkmkstart AAAAAAAABS}
{\bkmkend AAAAAAAABS}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
handles allocation of physical pages. for now relatively empty. its just in a class for later if i want to add specific state }}\par
{
{\f2 #include <ALLOCATION.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void * {\b AllocatePAge} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
allocates a single page faster than AllocatePages for a single page as it does not have to do size checking returns a pointer to the first valid address inside the page. the offset from the beginning of the page is not stable and might change based on the format and size of the header information. don't rely on it }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b FreePage} (void *ptr)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
frees a single page. faster than FreePages as it doesn't have to do bounds checking. performs a check if the pointer is a valid page pinter. (at a offset that corresponds to the sizeof the header and some other checks). if the pointer is invalid it will return false. nullptr is also invalid }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void * {\b AllocatePages} (size_t amountOfPages)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Allocates a number of pages. returns a pointer to the first valid address inside the first page. the offset from the beginning of the page is not stable and might change based on the format and size of the header information. don't rely on it. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b FreePages} (void *ptr)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Frees memory pages previously allocated and returns whether the operation was successful. a return of false can also indicate memory corruption or an invalid pointer. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
handles allocation of physical pages. for now relatively empty. its just in a class for later if i want to add specific state \par
}{
Definition at line {\b 28} of file {\b ALLOCATION.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v AllocatePAge\:SYSTEM::SUBSYSTEMS::ALLOCATION::PhysicalAllocator}
{\xe \v SYSTEM::SUBSYSTEMS::ALLOCATION::PhysicalAllocator\:AllocatePAge}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void * SYSTEM::SUBSYSTEMS::ALLOCATION::PhysicalAllocator::AllocatePAge (){\f2 [nodiscard]}}}
\par
{\bkmkstart AAAAAAAABT}
{\bkmkend AAAAAAAABT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
allocates a single page faster than AllocatePages for a single page as it does not have to do size checking returns a pointer to the first valid address inside the page. the offset from the beginning of the page is not stable and might change based on the format and size of the header information. don't rely on it }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
\par
}}}{
Definition at line {\b 13} of file {\b ALLOCATION.cpp}.}\par
}
{\xe \v AllocatePages\:SYSTEM::SUBSYSTEMS::ALLOCATION::PhysicalAllocator}
{\xe \v SYSTEM::SUBSYSTEMS::ALLOCATION::PhysicalAllocator\:AllocatePages}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void * SYSTEM::SUBSYSTEMS::ALLOCATION::PhysicalAllocator::AllocatePages (size_t amountOfPages)}}
\par
{\bkmkstart AAAAAAAABU}
{\bkmkend AAAAAAAABU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Allocates a number of pages. returns a pointer to the first valid address inside the first page. the offset from the beginning of the page is not stable and might change based on the format and size of the header information. don't rely on it. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i amountOfPages} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
\par
}}}{
Definition at line {\b 52} of file {\b ALLOCATION.cpp}.}\par
}
{\xe \v FreePage\:SYSTEM::SUBSYSTEMS::ALLOCATION::PhysicalAllocator}
{\xe \v SYSTEM::SUBSYSTEMS::ALLOCATION::PhysicalAllocator\:FreePage}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool SYSTEM::SUBSYSTEMS::ALLOCATION::PhysicalAllocator::FreePage (void * ptr){\f2 [nodiscard]}}}
\par
{\bkmkstart AAAAAAAABV}
{\bkmkend AAAAAAAABV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
frees a single page. faster than FreePages as it doesn't have to do bounds checking. performs a check if the pointer is a valid page pinter. (at a offset that corresponds to the sizeof the header and some other checks). if the pointer is invalid it will return false. nullptr is also invalid }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ptr} \cell }{\cell }
{\row }
}
}{
Definition at line {\b 36} of file {\b ALLOCATION.cpp}.}\par
}
{\xe \v FreePages\:SYSTEM::SUBSYSTEMS::ALLOCATION::PhysicalAllocator}
{\xe \v SYSTEM::SUBSYSTEMS::ALLOCATION::PhysicalAllocator\:FreePages}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool SYSTEM::SUBSYSTEMS::ALLOCATION::PhysicalAllocator::FreePages (void * ptr)}}
\par
{\bkmkstart AAAAAAAABW}
{\bkmkend AAAAAAAABW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Frees memory pages previously allocated and returns whether the operation was successful. a return of false can also indicate memory corruption or an invalid pointer. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ptr} \cell }{Pointer to the memory pages to be freed.\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
true if the pages were successfully freed; false otherwise.\par
}}}{
Definition at line {\b 92} of file {\b ALLOCATION.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
HEADER/SUBSYSTEMS/ALLOCATION/ALLOCATION.h\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
SOURCE/SUBSYSTEMS/ALLOCATION/ALLOCATION.cpp\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
SYSTEM::SUBSYSTEMS::RENDER::RenderState Class Reference\par \pard\plain 
{\tc\tcl2 \v SYSTEM::SUBSYSTEMS::RENDER::RenderState}
{\xe \v SYSTEM::SUBSYSTEMS::RENDER::RenderState}
{\bkmkstart AAAAAAAADC}
{\bkmkend AAAAAAAADC}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
render state class. a global singleton that holds the current render state. }}\par
{
{\f2 #include <RENDER.h>}}\par
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
render state class. a global singleton that holds the current render state. \par
}{
Definition at line {\b 70} of file {\b RENDER.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
HEADER/SUBSYSTEMS/RENDER/RENDER.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
SYSTEM::SYSTEM_INFO::SystemInfo Class Reference\par \pard\plain 
{\tc\tcl2 \v SYSTEM::SYSTEM_INFO::SystemInfo}
{\xe \v SYSTEM::SYSTEM_INFO::SystemInfo}
{\bkmkstart AAAAAAAADV}
{\bkmkend AAAAAAAADV}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
system info is a global singleton that contains information about the system }}\par
{
{\f2 #include <SYSTEM_INFO.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static void {\b InitSystemInfo} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Initializes the system info. it is immutable after this point. don't call any of the functions in this class before this function is called. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static const {\b SystemInfo} & {\b GetInstance} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
returns the global instance of the system info }{
}\par
}\par}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b installedRam} = 0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b cpuCores} = 0\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
system info is a global singleton that contains information about the system \par
}{
Definition at line {\b 17} of file {\b SYSTEM_INFO.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v GetInstance\:SYSTEM::SYSTEM_INFO::SystemInfo}
{\xe \v SYSTEM::SYSTEM_INFO::SystemInfo\:GetInstance}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const {\b SystemInfo} & SYSTEM::SYSTEM_INFO::SystemInfo::GetInstance (){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAADW}
{\bkmkend AAAAAAAADW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
returns the global instance of the system info }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
\par
}}}{
Definition at line {\b 29} of file {\b SYSTEM_INFO.cpp}.}\par
}
{\xe \v InitSystemInfo\:SYSTEM::SYSTEM_INFO::SystemInfo}
{\xe \v SYSTEM::SYSTEM_INFO::SystemInfo\:InitSystemInfo}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void SYSTEM::SYSTEM_INFO::SystemInfo::InitSystemInfo (){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAADX}
{\bkmkend AAAAAAAADX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Initializes the system info. it is immutable after this point. don't call any of the functions in this class before this function is called. }}\par
{
Definition at line {\b 22} of file {\b SYSTEM_INFO.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v cpuCores\:SYSTEM::SYSTEM_INFO::SystemInfo}
{\xe \v SYSTEM::SYSTEM_INFO::SystemInfo\:cpuCores}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t SYSTEM::SYSTEM_INFO::SystemInfo::cpuCores = 0}}
\par
{\bkmkstart AAAAAAAADY}
{\bkmkend AAAAAAAADY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 20} of file {\b SYSTEM_INFO.h}.}\par
}
{\xe \v installedRam\:SYSTEM::SYSTEM_INFO::SystemInfo}
{\xe \v SYSTEM::SYSTEM_INFO::SystemInfo\:installedRam}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t SYSTEM::SYSTEM_INFO::SystemInfo::installedRam = 0}}
\par
{\bkmkstart AAAAAAAADZ}
{\bkmkend AAAAAAAADZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 19} of file {\b SYSTEM_INFO.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
HEADER/SYTEM_INFO/SYSTEM_INFO.h\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
SOURCE/SYSTEM_INFO/SYSTEM_INFO.cpp\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
SYSTEM::STARTUP::PAGING::UEFI_LEFTOWER Class Reference\par \pard\plain 
{\tc\tcl2 \v SYSTEM::STARTUP::PAGING::UEFI_LEFTOWER}
{\xe \v SYSTEM::STARTUP::PAGING::UEFI_LEFTOWER}
{\bkmkstart AAAAAAAABJ}
{\bkmkend AAAAAAAABJ}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
UEFI leftovers are all contained in there. this mainly includes information about the memory map. }}\par
{
{\f2 #include <PAGE_MAP.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static EFI_MEMORY_DESCRIPTOR__ {\b EFI_MEMORY_DESCRIPTOR_} = nullptr\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
a void pointer to the EFI_MEMORY_DESCRIPTOR structure. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static size_t {\b EFI_MEMORY_MAP_SIZE} = 0\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
the size of the EFI memory map in bytes. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static size_t {\b EFI_MEMORY_DESCRIPTOR_SIZE} = 0\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
the size of the EFI_MEMORY_DESCRIPTOR structure in bytes. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
UEFI leftovers are all contained in there. this mainly includes information about the memory map. \par
}{
Definition at line {\b 23} of file {\b PAGE_MAP.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v EFI_MEMORY_DESCRIPTOR_\:SYSTEM::STARTUP::PAGING::UEFI_LEFTOWER}
{\xe \v SYSTEM::STARTUP::PAGING::UEFI_LEFTOWER\:EFI_MEMORY_DESCRIPTOR_}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
EFI_MEMORY_DESCRIPTOR__ SYSTEM::STARTUP::PAGING::UEFI_LEFTOWER::EFI_MEMORY_DESCRIPTOR_ = nullptr{\f2 [static]}}}
\par
{\bkmkstart AAAAAAAABK}
{\bkmkend AAAAAAAABK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
a void pointer to the EFI_MEMORY_DESCRIPTOR structure. }}\par
{
Definition at line {\b 28} of file {\b PAGE_MAP.h}.}\par
}
{\xe \v EFI_MEMORY_DESCRIPTOR_SIZE\:SYSTEM::STARTUP::PAGING::UEFI_LEFTOWER}
{\xe \v SYSTEM::STARTUP::PAGING::UEFI_LEFTOWER\:EFI_MEMORY_DESCRIPTOR_SIZE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t SYSTEM::STARTUP::PAGING::UEFI_LEFTOWER::EFI_MEMORY_DESCRIPTOR_SIZE = 0{\f2 [static]}}}
\par
{\bkmkstart AAAAAAAABL}
{\bkmkend AAAAAAAABL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
the size of the EFI_MEMORY_DESCRIPTOR structure in bytes. }}\par
{
Definition at line {\b 36} of file {\b PAGE_MAP.h}.}\par
}
{\xe \v EFI_MEMORY_MAP_SIZE\:SYSTEM::STARTUP::PAGING::UEFI_LEFTOWER}
{\xe \v SYSTEM::STARTUP::PAGING::UEFI_LEFTOWER\:EFI_MEMORY_MAP_SIZE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
size_t SYSTEM::STARTUP::PAGING::UEFI_LEFTOWER::EFI_MEMORY_MAP_SIZE = 0{\f2 [static]}}}
\par
{\bkmkstart AAAAAAAABM}
{\bkmkend AAAAAAAABM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
the size of the EFI memory map in bytes. }}\par
{
Definition at line {\b 32} of file {\b PAGE_MAP.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
HEADER/STARTUP/PAGE_MAP/PAGE_MAP.h\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
SOURCE/STARTUP/PAGE_MAP/PAGE_MAP.cpp\par
}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
File Documentation{\tc \v File Documentation}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
PCI.h\par \pard\plain 
{\tc\tcl2 \v HEADER/DRIVERS/PCI/PCI.h}
{\xe \v HEADER/DRIVERS/PCI/PCI.h}
{\bkmkstart AAAAAAAAAA}
{\bkmkend AAAAAAAAAA}
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #pragma once}\par
00002 {\cf17 namespace }SYSTEM \{\par
00003     {\cf17 namespace }DRIVERS\par
00004     \{\par
00008         {\cf17 namespace }PCI\par
00009         \{\par
00010             \par
00011         \}\par
00012 \par
00013     \}\par
00014 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
NAMESPACE_DOCS.h\par \pard\plain 
{\tc\tcl2 \v HEADER/NAMESPACE_DOCS.h}
{\xe \v HEADER/NAMESPACE_DOCS.h}
{\bkmkstart AAAAAAAAAB}
{\bkmkend AAAAAAAAAB}
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
SAL.h\par \pard\plain 
{\tc\tcl2 \v HEADER/SAL/SAL.h}
{\xe \v HEADER/SAL/SAL.h}
{\bkmkstart AAAAAAAAAC}
{\bkmkend AAAAAAAAAC}
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #pragma once}\par
00002 {\cf21 #ifndef OS_SAL_H}\par
00003 {\cf21 #define OS_SAL_H}\par
00004 {\cf21 #pragma once}\par
00005 {\cf21 #define NODISCARD [[nodiscard]]}\par
00006 {\cf21 #define NODISCARD_MSG(msg) [[nodiscard(msg)]]}\par
00007 {\cf21 #define FALLTHROUGH [[fallthrough]]}\par
00008 {\cf21 #define MAYBE_UNUSED [[maybe_unused]]}\par
00009 {\cf21 #define LIKELY [[likely]]}\par
00010 {\cf21 #define UNLIKELY [[unlikely]]}\par
00011 {\cf21 #define NO_RETURN [[noreturn]]}\par
00012 {\cf21 #define DEPRECATED [[deprecated]]}\par
00013 {\cf21 #define DEPRECATED_MSG(msg) [[deprecated(msg)]]}\par
00014 \par
00015 {\cf17 import}  <sal.h>;\par
00016 {\cf21 #endif }{\cf20 // !_SAL_H}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
GDT.h\par \pard\plain 
{\tc\tcl2 \v HEADER/STARTUP/GDT/GDT.h}
{\xe \v HEADER/STARTUP/GDT/GDT.h}
{\bkmkstart AAAAAAAAAD}
{\bkmkend AAAAAAAAAD}
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #pragma once}\par
00002 {\cf17 namespace }SYSTEM \{\par
00003     {\cf17 namespace }STARTUP \{\par
00009         {\cf17 namespace }GDT \{\par
00014             {\cf17 struct }GDT_ENTRY \{\par
00015                 {\cf18 unsigned} {\cf18 short} limit;\par
00016                 {\cf18 unsigned} {\cf18 short} base;\par
00017                 {\cf18 unsigned} {\cf18 char} _base;\par
00018                 {\cf18 unsigned} {\cf18 char} accses_byte;\par
00019                 {\cf18 unsigned} {\cf18 char} limit_flags;\par
00020                 {\cf18 unsigned}  {\cf18 char} __base;\par
00021 \par
00022                 GDT_ENTRY() = {\cf19 default};\par
00023             \};\par
00024         \}\par
00025     \}\par
00026 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
PAGE_MAP.h\par \pard\plain 
{\tc\tcl2 \v HEADER/STARTUP/PAGE_MAP/PAGE_MAP.h}
{\xe \v HEADER/STARTUP/PAGE_MAP/PAGE_MAP.h}
{\bkmkstart AAAAAAAAAE}
{\bkmkend AAAAAAAAAE}
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #pragma once}\par
00002 {\cf17 using  }EFI_MEMORY_DESCRIPTOR__ = {\cf18 void}*;\par
00003 {\cf17 namespace }SYSTEM::SUBSYSTEMS::ALLOCATION \{\par
00004     {\cf17 class }PhysicalAllocator;\par
00005 \}\par
00006 {\cf17 namespace }SYSTEM \{\par
00007     {\cf17 namespace }STARTUP \{\par
00011         {\cf17 namespace }PAGING \{\par
00012 \par
00018             {\cf17 extern} {\cf18 size_t} QueryInstalledRam();\par
00019 \par
00023             {\cf17 class }UEFI_LEFTOWER \{\par
00024             {\cf17 public}:\par
00028                 {\cf17 static} EFI_MEMORY_DESCRIPTOR__ EFI_MEMORY_DESCRIPTOR_;\par
00032                 {\cf17 static} {\cf18 size_t} EFI_MEMORY_MAP_SIZE;\par
00036                 {\cf17 static} {\cf18 size_t} EFI_MEMORY_DESCRIPTOR_SIZE;\par
00037             \};\par
00043             {\cf17 enum class} PageType \{\par
00044                 Free = 0,\par
00049                 MMIO = 1,\par
00053                 Allocated = 2,\par
00057                 EFI_Reserved = 3\par
00058 \par
00059             \};\par
00063             {\cf17 class }PageMapEntry \{ {\cf20 //-V730 // not necessary as objects of this type will never  be created directly, but only as part of the global page map.}\par
00064                 {\cf17 friend} {\cf17 class }GlobalPageMap;\par
00065                 {\cf17 friend} SYSTEM::SUBSYSTEMS::ALLOCATION::PhysicalAllocator;\par
00066 \par
00067                 {\cf18 size_t} physicalStart;\par
00068                 PageType Type;\par
00072                 {\cf18 bool} isFree = {\cf17 false};\par
00073 \par
00074             \};\par
00077             \par
00079             {\cf17 class }GlobalPageMap \{\par
00080                 {\cf18 size_t} sizeBytes = 0;\par
00081                 {\cf18 size_t} size_pages = 0;\par
00082                 {\cf18 size_t} etries = 0;\par
00086                 PageMapEntry* Entrys={\cf17 nullptr};\par
00087 \par
00088                 {\cf17 friend} SYSTEM::SUBSYSTEMS::ALLOCATION::PhysicalAllocator;\par
00089             {\cf17 public}:\par
00096                 {\cf17 static} {\cf18 bool} AllocatePageMap();\par
00097 \par
00098                 \par
00099 \par
00100             \};\par
00101         \}\par
00102     \}\par
00103 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ALLOCATION.h\par \pard\plain 
{\tc\tcl2 \v HEADER/SUBSYSTEMS/ALLOCATION/ALLOCATION.h}
{\xe \v HEADER/SUBSYSTEMS/ALLOCATION/ALLOCATION.h}
{\bkmkstart AAAAAAAAAF}
{\bkmkend AAAAAAAAAF}
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #pragma once}\par
00002 {\cf21 #include "SAL/SAL.h"}\par
00003 {\cf17 namespace }SYSTEM \{\par
00004     {\cf17 namespace }SUBSYSTEMS \{\par
00008         {\cf17 namespace }ALLOCATION\{\par
00013             {\cf17 struct }PageHeader \{\par
00017                 {\cf18 size_t} amoutofPages = 0;\par
00021                 {\cf18 void}* usable = {\cf17 nullptr};\par
00022 \par
00023             \};\par
00028             {\cf17 class }PhysicalAllocator \{\par
00029                 {\cf17 constexpr} {\cf17 static} {\cf18 size_t} PageSize = 4096; {\cf20 // size of a single page}\par
00030             {\cf17 public}:\par
00038                 [[nodiscard({\cf22 "discarding the address of the allocated page will lead to a memory leak as it cant be freed anymore"})]] \par
00039                 {\cf18 void}* AllocatePAge();\par
00047                 [[nodiscard({\cf22 "discarding the return of this function can lead to leaks or undetected memory corruption"})]]\par
00048                 {\cf18 bool} FreePage({\cf18 void}* ptr);\par
00049 \par
00050 \par
00058                 NODISCARD_MSG({\cf22 "discarding the address of the allocated pages will lead to a memory leak as it cant be freed anymore"})\par
00059                 {\cf18 void}* AllocatePages({\cf18 size_t} amountOfPages);\par
00060 \par
00067                 NODISCARD_MSG({\cf22 "discarding the return of this function can lead to leaks or undetected memory corruption"})\par
00068                 {\cf18 bool} FreePages({\cf18 void}* ptr);\par
00069             \};\par
00070         \}\par
00071     \}\par
00072 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
CONSOLE.h\par \pard\plain 
{\tc\tcl2 \v HEADER/SUBSYSTEMS/CONSOLE/CONSOLE.h}
{\xe \v HEADER/SUBSYSTEMS/CONSOLE/CONSOLE.h}
{\bkmkstart AAAAAAAAAG}
{\bkmkend AAAAAAAAAG}
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #pragma once}\par
00002 {\cf17 namespace }SYSTEM \{\par
00003     {\cf17 namespace }SUBSYSTEMS \{\par
00007         {\cf17 namespace }CONSOLE \{\par
00008             {\cf17 constexpr} {\cf17 inline} {\cf18 size_t} tabSize = 4; {\cf20 //the size of a tab in the console. this is used to calculate the cursor position when a tab is encountered}\par
00013             {\cf17 struct }ConsoleInfo \{\par
00014             {\cf17 private}:\par
00015                 \par
00016             {\cf17 public}:\par
00017                 {\cf18 size_t} buffer;\par
00018                 {\cf18 size_t} collums;\par
00019                 {\cf18 size_t} rows;\par
00020                 {\cf18 bool} scrollingEnabled;\par
00021 \par
00022             \};\par
00023 \par
00024             {\cf17 class }Console \{\par
00025             {\cf17 public}:\par
00034             {\cf17 static} {\cf18 bool} InitConsole( {\cf18 size_t} collums, {\cf18 size_t} rows, {\cf18 size_t} pixelsperRow,{\cf18 size_t} pixelsperCollum);\par
00039             {\cf17 static} {\cf18 void} WriteLine({\cf17 const} {\cf18 wchar_t}* str);\par
00046             {\cf17 static} {\cf18 void} WriteF({\cf18 size_t} args ,{\cf17 const} {\cf18 char}* format, ...);\par
00051             {\cf17 static} {\cf18 void} Write({\cf17 const} {\cf18 wchar_t}* str);\par
00056             {\cf17 static} {\cf17 const} ConsoleInfo QueryConsoleInfo();\par
00060             {\cf17 static} {\cf18 void} ClearConsole();\par
00065             {\cf17 static} {\cf18 void} Flush();\par
00071             {\cf17 static} {\cf18 bool} ToggleANSICodes();\par
00072             \};\par
00073 \par
00074         \}\par
00075     \}\par
00076 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
RENDER.h\par \pard\plain 
{\tc\tcl2 \v HEADER/SUBSYSTEMS/RENDER/RENDER.h}
{\xe \v HEADER/SUBSYSTEMS/RENDER/RENDER.h}
{\bkmkstart AAAAAAAAAH}
{\bkmkend AAAAAAAAAH}
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #pragma once}\par
00002 {\cf17 namespace }SYSTEM::SUBSYSTEMS::RENDER \{\par
00003     {\cf17 namespace }COLOURS \{\par
00004         {\cf17 constexpr} {\cf18 unsigned} {\cf18 int} White = 0xffffffffU; {\cf20 //-V112}\par
00005     \}\par
00009     {\cf17 namespace }SIMPLE \{\par
00010         {\cf17 extern} {\cf18 unsigned} {\cf18 int}* FramebufferBase;\par
00011         {\cf17 extern} {\cf18 unsigned} {\cf18 int} FramebufferWidth;\par
00012         {\cf17 extern} {\cf18 unsigned} {\cf18 int} FramebufferHeight;\par
00013         {\cf17 extern} {\cf18 unsigned} {\cf18 int} PixelsPerScanline;\par
00017         {\cf17 struct }CHAR \{\par
00018             {\cf18 char} c; {\cf20 // the char itself}\par
00022             {\cf18 unsigned} {\cf18 char} width;\par
00026                 {\cf18 unsigned} {\cf18 char} height;\par
00027         {\cf17 private}:\par
00028         {\cf17 public}:\par
00032             {\cf18 unsigned} {\cf18 int} Color;\par
00036             {\cf18 unsigned} {\cf18 char} BMP[16];\par
00037         \};\par
00042         {\cf17 extern} CHAR SimpleFont[255];\par
00043 \par
00052         {\cf18 void} SimpleDrawChar({\cf18 unsigned} {\cf18 int} x, {\cf18 unsigned} {\cf18 int} y, {\cf18 wchar_t} c); {\cf20 //-V2565 // contains direct recursion on a invalid char. will only recur once as the char printed instead is always valid}\par
00053 \par
00063          {\cf18 void} SimpleDrawString({\cf17 const} {\cf18 wchar_t}* str, {\cf18 unsigned} {\cf18 int} x, {\cf18 unsigned} {\cf18 int} y); {\cf20 //-V2565 // contains direct recursion on a too long string. will only recur once as the string printed instead is always short enough}\par
00064 \par
00065     \}\par
00070     {\cf17 class }RenderState \{\par
00071     {\cf17 private}:\par
00072         \par
00073 \par
00074 \par
00075         RenderState* Singeton = {\cf17 nullptr};\par
00076     \};\par
00077 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
SYSTEM_INFO.h\par \pard\plain 
{\tc\tcl2 \v HEADER/SYTEM_INFO/SYSTEM_INFO.h}
{\xe \v HEADER/SYTEM_INFO/SYSTEM_INFO.h}
{\bkmkstart AAAAAAAAAI}
{\bkmkend AAAAAAAAAI}
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #pragma once}\par
00002 {\cf21 #include "../STARTUP/PAGE_MAP/PAGE_MAP.h"}\par
00003 {\cf21 #include "../STARTUP/GDT/GDT.h"}\par
00004 {\cf17 namespace }SYSTEM \{\par
00008     {\cf17 namespace }SYSTEM_INFO \{\par
00012         {\cf17 extern} SYSTEM::STARTUP::PAGING::GlobalPageMap GlobalPageMap;\par
00013 \par
00017         {\cf17 class }SystemInfo \{\par
00018         {\cf17 public}:\par
00019             {\cf18 size_t} installedRam = 0;\par
00020             {\cf18 size_t} cpuCores = 0;\par
00021         {\cf17 private}:\par
00022             SystemInfo({\cf17 const} SystemInfo& other) = {\cf17 delete};\par
00023             SystemInfo& operator=({\cf17 const} SystemInfo& other)={\cf17 delete};\par
00024             SystemInfo(SystemInfo&& other);\par
00025             SystemInfo& operator=(SystemInfo&& other);\par
00026             SystemInfo() = {\cf19 default};\par
00027             {\cf17 static} SystemInfo GLobalInst;\par
00028         {\cf17 public}:\par
00029             ~SystemInfo() = {\cf19 default};\par
00034             {\cf17 static} {\cf18 void} InitSystemInfo();\par
00039             {\cf17 static} {\cf17 const} SystemInfo& GetInstance();\par
00040 \par
00041         \};\par
00042     \}\par
00043 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
MAIN.cpp\par \pard\plain 
{\bkmkstart AAAAAAAAAJ}
{\bkmkend AAAAAAAAAJ}
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf20 // This is a personal academic project. Dear PVS-Studio, please check it.}\par
00002 \par
00003 {\cf20 // PVS-Studio Static Code Analyzer for C, C++, C#, and Java: https://pvs-studio.com}\par
00004 \par
00005 {\cf17 extern}{\cf22 "C"} \{\par
00006 \par
00007 {\cf21 #include <gnu-efi/inc/efi.h>}\par
00008 {\cf21 #include <gnu-efi/inc/efilib.h>}\par
00009 \}\par
00010 {\cf21 #include "HEADER/SUBSYSTEMS/RENDER/RENDER.h"}\par
00011 {\cf21 #include "HEADER/STARTUP/PAGE_MAP/PAGE_MAP.h"}\par
00012 {\cf21 #include "HEADER/SUBSYSTEMS/CONSOLE/CONSOLE.h"}\par
00013 {\cf21 #include "HEADER/SYTEM_INFO/SYSTEM_INFO.h"}\par
00014 {\cf21 #include <intrin.h>}\par
00015 {\cf21 #include <HEADER/UTILLITY/UTILLITY_F.h>}\par
00016 {\cf17 static} uint32_t get_cpu_base_freq_mhz() \{\par
00017     {\cf18 int} cpuInfo[4] = \{\};\par
00018     __cpuid(&cpuInfo[0], 0x16); {\cf20 //-V3546 // IDK why PVS is complaining}\par
00019 \par
00020     {\cf19 if} (cpuInfo[0] == 0) \{\par
00021         {\cf19 return} 0; {\cf20 // Unsupported}\par
00022     \}\par
00023 \par
00024     {\cf19 return} {\cf17 static_cast<}{\cf18 unsigned} {\cf18 int}{\cf17 >}(cpuInfo[0]);  {\cf20 // EAX = Base frequency in MHz}\par
00025 \}\par
00026 {\cf17 static} {\cf18 void} stall_us(uint64_t microseconds, uint64_t cpu_mhz) \{\par
00027     {\cf17 const} uint64_t start = __rdtsc();\par
00028     {\cf17 const} uint64_t ticks = microseconds * cpu_mhz;\par
00029 \par
00030     {\cf19 while} ((__rdtsc() - start) < ticks) \{\par
00031         _mm_pause(); {\cf20 // hint to CPU: spin-wait loop}\par
00032     \}\par
00033 \}\par
00034 {\cf17 using }Console = SYSTEM::SUBSYSTEMS::CONSOLE::Console;\par
00035 {\cf17 extern} {\cf22 "C"}\{\par
00036 EFI_STATUS _KERNEL_MAIN(EFI_HANDLE ImageHandle, EFI_SYSTEM_TABLE* SystemTable)\par
00037 \{\par
00038     InitializeLib(ImageHandle, SystemTable);\par
00039 \par
00040     Print(L{\cf22 "Hello, World!\\n"});\par
00041     __assume(SystemTable != {\cf17 nullptr}); \par
00042     STD::ignore = SystemTable->ConOut->ClearScreen(SystemTable->ConOut);\par
00043     {\cf20 //getMemory map}\par
00044     EFI_MEMORY_DESCRIPTOR* MemoryMap = {\cf17 nullptr};\par
00045     UINTN MemoryMapSize = 0;\par
00046     UINTN MapKey = 0;\par
00047     UINTN DescriptorSize = 0;\par
00048     UINT32 DescriptorVersion = 0;\par
00049 \par
00050     {\cf20 //}\par
00051     EFI_STATUS Status = SystemTable->BootServices->GetMemoryMap(&MemoryMapSize, MemoryMap, &MapKey, &DescriptorSize, &DescriptorVersion);\par
00052     {\cf19 if} (Status == EFI_BUFFER_TOO_SMALL) \{\par
00053         MemoryMapSize += DescriptorSize * 100; {\cf20 // Allocate more space than needed}\par
00054         Status = SystemTable->BootServices->AllocatePool(EfiLoaderData, MemoryMapSize, {\cf17 reinterpret_cast<}{\cf18 void}**{\cf17 >}(&MemoryMap));\par
00055         {\cf19 if} (EFI_ERROR(Status)) \{\par
00056             Print(L{\cf22 "Failed to allocate memory for the memory map.\\n"});\par
00057             {\cf19 return} Status;\par
00058         \}\par
00059         Status = SystemTable->BootServices->GetMemoryMap(&MemoryMapSize, MemoryMap, &MapKey, &DescriptorSize, &DescriptorVersion);\par
00060         {\cf19 if} (EFI_ERROR(Status)) \{\par
00061             Print(L{\cf22 "Failed to get memory map.\\n"});\par
00062             {\cf19 return} Status;\par
00063         \}\par
00064     \}\par
00065     {\cf20 //saving the memory map to the UEFI leftover in the page map}\par
00066     SYSTEM::STARTUP::PAGING::UEFI_LEFTOWER::EFI_MEMORY_DESCRIPTOR_ = MemoryMap;\par
00067     SYSTEM::STARTUP::PAGING::UEFI_LEFTOWER::EFI_MEMORY_MAP_SIZE = MemoryMapSize;\par
00068     SYSTEM::STARTUP::PAGING::UEFI_LEFTOWER::EFI_MEMORY_DESCRIPTOR_SIZE = DescriptorSize;\par
00069     Print(L{\cf22 "memory map Acquired"});\par
00070     __assume(MemoryMap != {\cf17 nullptr});\par
00071 \par
00072     {\cf20 //print map}\par
00073     {\cf18 bool} a = {\cf17 false};\par
00074     {\cf19 for} (UINTN i = 0; i < MemoryMapSize / DescriptorSize; i++) \{\par
00075         __assume(MemoryMap != {\cf17 nullptr});\par
00076         {\cf17 const} EFI_MEMORY_DESCRIPTOR* Descriptor = {\cf17 reinterpret_cast<}{\cf17 const }EFI_MEMORY_DESCRIPTOR*{\cf17 >}({\cf17 reinterpret_cast<}{\cf17 const }UINT8*{\cf17 >}(MemoryMap) + i * DescriptorSize); {\cf20 //-V769 yeah there is a assume above but PVS is stoopid //-V3539}\par
00077         __assume(Descriptor != {\cf17 nullptr}); \par
00078         Print(L{\cf22 "Type: %d, PhysicalStart: %lx, NumberOfPages: %lx  "} , Descriptor->Type, Descriptor->PhysicalStart, Descriptor->NumberOfPages);{\cf20 //-V769 //the memory map should always be valid as we just got it //-V522}\par
00079         {\cf19 if} (a) \{\par
00080             Print(L{\cf22 "\\n"});\par
00081         \}\par
00082         a = !a;\par
00083     \}\par
00084 \par
00085     {\cf18 size_t} conventionlaRAM = 0;\par
00086     {\cf19 for} (UINTN i = 0; i < MemoryMapSize / DescriptorSize; i++) \{\par
00087         {\cf17 const} EFI_MEMORY_DESCRIPTOR* Descriptor = {\cf17 reinterpret_cast<}{\cf17 const }EFI_MEMORY_DESCRIPTOR*{\cf17 >}({\cf17 reinterpret_cast<}{\cf17 const }UINT8*{\cf17 >}(MemoryMap) + i * DescriptorSize); {\cf20 //-V3539}\par
00088         __assume(Descriptor != {\cf17 nullptr});\par
00089         {\cf19 if} (Descriptor->Type == EfiConventionalMemory) \{ {\cf20 //-V522 // in this situation nullptr might be a legitimate pointer to a valid memory map entry}\par
00090             conventionlaRAM += Descriptor->NumberOfPages * EFI_PAGE_SIZE;\par
00091         \}\par
00092         {\cf20 //Print(L"Type: %d, PhysicalStart: %lx, NumberOfPages: %lx  ", Descriptor->Type, Descriptor->PhysicalStart, Descriptor->NumberOfPages);}\par
00093         {\cf20 //SystemTable->BootServices->Stall(1000000); // Stall for 1 second to allow reading the output}\par
00094     \}\par
00095     Print(L{\cf22 "Total Conventional Memory: %Lu bytes\\n"}, conventionlaRAM); {\cf20 //-V111}\par
00096     {\cf20 //print installed RAM size}\par
00097 \par
00098     SYSTEM::SYSTEM_INFO::SystemInfo::InitSystemInfo();\par
00099     Print(L{\cf22 "Installed RAM: %Lu bytes\\n"}, SYSTEM::SYSTEM_INFO::SystemInfo::GetInstance().installedRam); {\cf20 //-V111}\par
00100     STD::ignore=SystemTable->BootServices->Stall(5000000); {\cf20 // Stall for 5 second to allow reading the output}\par
00101 \par
00102     {\cf20 // get graphics protocol}\par
00103     EFI_GRAPHICS_OUTPUT_PROTOCOL* GraphicsOutput = {\cf17 nullptr};\par
00104     Status = SystemTable->BootServices->LocateProtocol(&gEfiGraphicsOutputProtocolGuid, {\cf17 nullptr}, {\cf17 reinterpret_cast<}{\cf18 void}**{\cf17 >}(&GraphicsOutput));\par
00105     {\cf19 if} (EFI_ERROR(Status)) \{\par
00106         Print(L{\cf22 "Failed to locate Graphics Output Protocol.\\n"});\par
00107         {\cf19 return} Status;\par
00108     \}\par
00109     {\cf19 if}(GraphicsOutput == {\cf17 nullptr}) \{\par
00110         Print(L{\cf22 "Graphics Output Protocol is NULL.\\n"});\par
00111         {\cf19 return} EFI_NOT_FOUND;\par
00112     \}\par
00113     Print(L{\cf22 "Graphics Output Protocol located.\\n"});\par
00114     {\cf17 const} {\cf17 auto} b = GraphicsOutput->Mode->Info->VerticalResolution;\par
00115     Print(L{\cf22 "Resolution: %d x %d\\n"}, a, b);\par
00116     {\cf20 //=======================================EXIT_BOOT_SERVICES===============================================///}\par
00117     Status = SystemTable->BootServices->ExitBootServices(ImageHandle, MapKey);\par
00118     {\cf20 //fill framebuffer with red color}\par
00119     UINT32* FrameBuffer = {\cf17 reinterpret_cast<}UINT32*{\cf17 >}(GraphicsOutput->Mode->FrameBufferBase); {\cf20 //-V3546 something something raw memory/physical memory}\par
00120     SYSTEM::SUBSYSTEMS::RENDER::SIMPLE::FramebufferBase = FrameBuffer;\par
00121     SYSTEM::SUBSYSTEMS::RENDER::SIMPLE::FramebufferHeight = GraphicsOutput->Mode->Info->VerticalResolution;\par
00122     SYSTEM::SUBSYSTEMS::RENDER::SIMPLE::FramebufferWidth = GraphicsOutput->Mode->Info->HorizontalResolution;\par
00123     SYSTEM::SUBSYSTEMS::RENDER::SIMPLE::PixelsPerScanline = GraphicsOutput->Mode->Info->PixelsPerScanLine;\par
00124     {\cf17 const} UINTN FrameBufferSize = {\cf17 static_cast<}UINTN{\cf17 >}(GraphicsOutput->Mode->Info->HorizontalResolution) * GraphicsOutput->Mode->Info->VerticalResolution;\par
00125     {\cf19 for} (UINTN i = 0; i < FrameBufferSize; i++) \{\par
00126     {\cf20 //  FrameBuffer[i] = 0xafa5ff; // Red color in ARGB format}\par
00127         FrameBuffer[i] = 0xa000ff; {\cf20 // Red color in ARGB format //-V3539}\par
00128     \}\par
00129     {\cf19 if} (!Console::InitConsole(40, 40, 16, 8)) \{\par
00130         Print(L{\cf22 "Failed to initialize console.\\n"});\par
00131         {\cf19 return} EFI_DEVICE_ERROR;\par
00132     \}\par
00133 \par
00134     Console::WriteLine(L{\cf22 "CONSOLE STARTED"});\par
00135     Console::WriteLine(L{\cf22 "CONSOLE TEST"});\par
00136     Console::WriteLine(L{\cf22 "ABCDEFGHIJKLMNOPQRSTUVWXYZ"});\par
00137     Console::WriteLine(L{\cf22 "abcdefghijklmnopqrstuvwxyz"});\par
00138     Console::WriteLine(L{\cf22 "1234567890"});\par
00139     Console::WriteLine(L{\cf22 "!\'A7$%&/()=?,.-#+*<>"});\par
00140     Console::WriteLine(L{\cf22 "KERNEL LOADING COMPLETE"});\par
00141     Console::WriteLine(L{\cf22 "SETTING UP GLOBAL PAGE TABLE..."});\par
00142     {\cf19 if} (!SYSTEM::STARTUP::PAGING::GlobalPageMap::AllocatePageMap()) \{\par
00143         Print(L{\cf22 "Failed to allocate global page map.\\n"});\par
00144         {\cf19 return} EFI_OUT_OF_RESOURCES;\par
00145     \}\par
00146 \par
00147 \par
00148     Console::WriteLine(L{\cf22 "SETTING UP GDT..."});\par
00149     {\cf20 //TODO insert call to setup of the GDT;}\par
00150     Console::WriteLine(L{\cf22 "GDT SETUP COMPLETE"});\par
00151 \par
00152     Console::WriteLine(L{\cf22 "SETTING UP IDT..."});\par
00153     {\cf20 //TODO insert call to setup of the IDT}\par
00154 \par
00155     Console::WriteLine(L{\cf22 "IDT SETUP COMPLETE"});\par
00156     {\cf18 size_t} freq = 0;\par
00157     freq = get_cpu_base_freq_mhz();\par
00158     {\cf19 if} (freq == 0) \{\par
00159         {\cf20 //set to fallback 3,6ghz}\par
00160         freq = 3600;\par
00161     \}\par
00162     stall_us(10000000, freq);\par
00163 \par
00164 \par
00165     STD::ignore=SystemTable->RuntimeServices->ResetSystem(EfiResetShutdown, EFI_SUCCESS, 0, {\cf17 nullptr});\par
00166     {\cf19 return} EFI_SUCCESS;\par
00167 \par
00168 \}\par
00169 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
PCI.cpp\par \pard\plain 
{\tc\tcl2 \v SOURCE/DRIVERS/PCI/PCI.cpp}
{\xe \v SOURCE/DRIVERS/PCI/PCI.cpp}
{\bkmkstart AAAAAAAAAK}
{\bkmkend AAAAAAAAAK}
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf20 // This is a personal academic project. Dear PVS-Studio, please check it.}\par
00002 \par
00003 {\cf20 // PVS-Studio Static Code Analyzer for C, C++, C#, and Java: https://pvs-studio.com}\par
00004 \par
00005 {\cf21 #pragma once}\par
00006 {\cf21 #include "../../../HEADER/DRIVERS/PCI/PCI.h"}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
PAGE_MAP.cpp\par \pard\plain 
{\tc\tcl2 \v SOURCE/STARTUP/PAGE_MAP/PAGE_MAP.cpp}
{\xe \v SOURCE/STARTUP/PAGE_MAP/PAGE_MAP.cpp}
{\bkmkstart AAAAAAAAAL}
{\bkmkend AAAAAAAAAL}
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf20 // This is a personal academic project. Dear PVS-Studio, please check it.}\par
00002 \par
00003 {\cf20 // PVS-Studio Static Code Analyzer for C, C++, C#, and Java: https://pvs-studio.com}\par
00004 \par
00005 {\cf17 extern}{\cf22 "C"} \{\par
00006 {\cf21 #include <gnu-efi/inc/efi.h>}\par
00007 {\cf21 #include <gnu-efi/inc/efilib.h>}\par
00008 \}\par
00009 {\cf21 #include "../../../HEADER/SYTEM_INFO/SYSTEM_INFO.h"}\par
00010 {\cf21 #include "../../../HEADER/STARTUP/PAGE_MAP/PAGE_MAP.h"}\par
00011 {\cf17 namespace }SYSTEM \{\par
00012     {\cf17 namespace }STARTUP \{\par
00013         {\cf17 namespace }PAGING \{\par
00014 \par
00015             EFI_MEMORY_DESCRIPTOR__ UEFI_LEFTOWER::EFI_MEMORY_DESCRIPTOR_ = {\cf17 nullptr};\par
00016             {\cf18 size_t} UEFI_LEFTOWER::EFI_MEMORY_MAP_SIZE = 0;\par
00017             {\cf18 size_t} UEFI_LEFTOWER::EFI_MEMORY_DESCRIPTOR_SIZE = 0;\par
00018             {\cf18 size_t} QueryInstalledRam() \{\par
00019                 {\cf17 static} {\cf18 size_t} ram = 0;\par
00020                 {\cf19 if} (ram == 0) \{\par
00021                 {\cf17 const}   EFI_MEMORY_DESCRIPTOR* memoryMap = {\cf17 static_cast<}EFI_MEMORY_DESCRIPTOR*{\cf17 >}(UEFI_LEFTOWER::EFI_MEMORY_DESCRIPTOR_); {\cf20 //-V3546}\par
00022                     {\cf20 //ram = memoryMap->NumberOfPages * EFI_PAGE_SIZE;}\par
00023                     {\cf17 const} {\cf18 size_t} descriptorSize = UEFI_LEFTOWER::EFI_MEMORY_DESCRIPTOR_SIZE;\par
00024                     {\cf18 size_t} conventionlaRAM = 0;\par
00025                     {\cf19 for} (UINTN i = 0; i < UEFI_LEFTOWER::EFI_MEMORY_MAP_SIZE / descriptorSize; i++) \{\par
00026                         {\cf17 const} EFI_MEMORY_DESCRIPTOR* Descriptor = {\cf17 reinterpret_cast<}{\cf17 const }EFI_MEMORY_DESCRIPTOR*{\cf17 >}({\cf17 reinterpret_cast<}{\cf17 const }UINT8*{\cf17 >}(memoryMap) + i * descriptorSize); {\cf20 //-V3539}\par
00027                         {\cf19 if} (Descriptor->Type == EfiConventionalMemory) \{\par
00028                             {\cf20 //Print(L"Conventional Memory found ");}\par
00029                             conventionlaRAM += Descriptor->NumberOfPages * EFI_PAGE_SIZE;\par
00030                         \}\par
00031                         {\cf20 //Print(L"Type: %d, PhysicalStart: %lx, NumberOfPages: %lx  ", Descriptor->Type, Descriptor->PhysicalStart, Descriptor->NumberOfPages);}\par
00032                         {\cf20 //SystemTable->BootServices->Stall(1000000); // Stall for 1 second to allow reading the output}\par
00033                         {\cf20 //Print(L"\\n");}\par
00034                     \}\par
00035                     ram = conventionlaRAM;\par
00036                 \}\par
00037                 {\cf19 return} ram;\par
00038             \}\par
00039             {\cf18 bool} GlobalPageMap::AllocatePageMap()\par
00040             \{\par
00041             {\cf17 const}   {\cf18 size_t} Ram = SYSTEM::SYSTEM_INFO::SystemInfo::GetInstance().installedRam;\par
00042                 {\cf19 if} (Ram == 0) \{\par
00043                     {\cf19 return} {\cf17 false}; {\cf20 // RAM not initialized}\par
00044                 \}\par
00045                 {\cf17 constexpr} {\cf18 size_t} pageSize = EFI_PAGE_SIZE;\par
00046                 {\cf17 const} {\cf18 size_t} pageCount = Ram / pageSize;\par
00047                 {\cf17 const} {\cf18 size_t} pageMapSize = pageCount * {\cf17 sizeof}(PageMapEntry);\par
00048                 {\cf20 //find a region in the UEFI memory map large enough to fit the page map}\par
00049                 {\cf17 const} {\cf18 size_t} DescriptorSize = UEFI_LEFTOWER::EFI_MEMORY_DESCRIPTOR_SIZE;\par
00050                 {\cf20 //size_t memorymapSize = UEFI_LEFTOWER::EFI_MEMORY_MAP_SIZE;}\par
00051                 {\cf18 size_t} PhysicalStartOfMap = 0;\par
00052                 {\cf18 size_t} PagesUsedByMap = 0;\par
00053 \par
00054                 {\cf17 const} EFI_MEMORY_DESCRIPTOR* memoryMap = {\cf17 static_cast<}EFI_MEMORY_DESCRIPTOR*{\cf17 >}(UEFI_LEFTOWER::EFI_MEMORY_DESCRIPTOR_);{\cf20 //necessary here as we deal with physical memory //-V3546}\par
00055                 {\cf20 //enumerate the map}\par
00056                 {\cf19 for} (UINTN i = 0; i < UEFI_LEFTOWER::EFI_MEMORY_MAP_SIZE / DescriptorSize; i++) \{\par
00057                     {\cf17 const} EFI_MEMORY_DESCRIPTOR* Descriptor = {\cf17 reinterpret_cast<}{\cf17 const }EFI_MEMORY_DESCRIPTOR*{\cf17 >}({\cf17 reinterpret_cast<}{\cf17 const }UINT8*{\cf17 >}(memoryMap) + i * DescriptorSize); {\cf20 //-V3539}\par
00058                     {\cf19 if} (Descriptor->Type == EfiConventionalMemory && Descriptor->NumberOfPages * EFI_PAGE_SIZE >= pageMapSize) \{\par
00059                         PhysicalStartOfMap = Descriptor->PhysicalStart;\par
00060                         PagesUsedByMap = pageMapSize / pageSize;\par
00061                         {\cf19 break};\par
00062                     \}\par
00063                 \}\par
00064                 {\cf19 if} (PhysicalStartOfMap == 0 || PagesUsedByMap == 0) \{\par
00065                     {\cf19 return} {\cf17 false}; {\cf20 // No suitable memory region found}\par
00066                 \}\par
00067                 {\cf20 //now that we have a location for the map we can start recording the physical pages into it}\par
00068                 {\cf20 //this involves treating the found region as an array of PageMapEntry }\par
00069                 {\cf20 //to make these entries useful well enumerate the map again and record already used regions into the map and recording their type.}\par
00070 \par
00071                 SYSTEM::SYSTEM_INFO::GlobalPageMap.Entrys = {\cf17 reinterpret_cast<}PageMapEntry*{\cf17 >}(PhysicalStartOfMap); {\cf20 //-V3546}\par
00072                 SYSTEM::SYSTEM_INFO::GlobalPageMap.sizeBytes = pageMapSize;\par
00073                 SYSTEM::SYSTEM_INFO::GlobalPageMap.size_pages = PagesUsedByMap;\par
00074                 SYSTEM::SYSTEM_INFO::GlobalPageMap.etries = pageCount;\par
00075                 {\cf19 for} ({\cf18 size_t} i = 0; i < pageCount; i++) \{\par
00076                     SYSTEM::SYSTEM_INFO::GlobalPageMap.Entrys[i].physicalStart = PhysicalStartOfMap + i * pageSize; {\cf20 //-V3539}\par
00077                     SYSTEM::SYSTEM_INFO::GlobalPageMap.Entrys[i].Type = PageType::Free; {\cf20 // Initialize as free //-V3539}\par
00078                     SYSTEM::SYSTEM_INFO::GlobalPageMap.Entrys[i].isFree = {\cf17 true}; {\cf20 //-V3539}\par
00079                 \}\par
00080                 {\cf20 //now we will enumerate the map again and record already used regions into the map and recording their type.}\par
00081                 {\cf19 for} (UINTN i = 0; i < UEFI_LEFTOWER::EFI_MEMORY_MAP_SIZE / DescriptorSize; i++) \{\par
00082                     {\cf17 const} EFI_MEMORY_DESCRIPTOR* Descriptor = {\cf17 reinterpret_cast<}{\cf17 const }EFI_MEMORY_DESCRIPTOR*{\cf17 >}({\cf17 reinterpret_cast<}{\cf17 const }UINT8*{\cf17 >}(memoryMap) + i * DescriptorSize);  {\cf20 //-V3539}\par
00083                     {\cf20 //base stuff necessary for all memory types}\par
00084 \par
00085                     {\cf17 const} UINT32 DescriptorType = Descriptor->Type;\par
00086 \par
00087                     {\cf18 void}* PhysicalBaase = {\cf17 reinterpret_cast<}{\cf18 void}*{\cf17 >}(Descriptor->PhysicalStart);\par
00088                     {\cf17 const} {\cf18 size_t} numPages = Descriptor->NumberOfPages;\par
00089                     {\cf17 const} {\cf18 size_t} FirstPage = {\cf17 reinterpret_cast<}uintptr_t{\cf17 >}(PhysicalBaase) / pageSize;\par
00090                     {\cf19 switch} (DescriptorType) \{ {\cf20 //-V2520 for now i falltrough all the reserved memory types to the same case}\par
00091                         {\cf20 //first all the Reserved Memory stuff. they'll all falltrough to the same thing to make it easier}\par
00092 \par
00093                     {\cf19 case} EfiReservedMemoryType: \{ __fallthrough; \}\par
00094                     {\cf19 case} EfiRuntimeServicesCode: \{ __fallthrough; \}\par
00095                     {\cf19 case} EfiRuntimeServicesData: \{ __fallthrough; \}\par
00096                     {\cf19 case} EfiUnusableMemory: \{ __fallthrough; \}\par
00097                     {\cf19 case} EfiACPIReclaimMemory: \{ __fallthrough; \}\par
00098                     {\cf19 case} EfiACPIMemoryNVS: \{ __fallthrough; \}\par
00099                     {\cf19 case} EfiPalCode: \{ __fallthrough; \}\par
00100                                    {\cf20 //all of the reserved memory descriptors falltrough to this}\par
00101                     {\cf19 case} EfiPersistentMemory: \{\par
00102                         {\cf20 //ill iterate trough all the pages and set the pages in the page table to be reserved}\par
00103                         {\cf19 for} ({\cf18 size_t} page = FirstPage; page < FirstPage + numPages; page++) \{\par
00104                             PageMapEntry& curr = SYSTEM_INFO::GlobalPageMap.Entrys[page]; {\cf20 //-V3539}\par
00105                             curr.isFree = {\cf17 false};\par
00106                             {\cf20 //curr.physicalStart=PhysicalBaase //not necessary to reassign the physical base as this is done in the step before}\par
00107                             curr.Type = PageType::EFI_Reserved;{\cf20 // for now i don't differentiate between reserved memory types}\par
00108                         \}\par
00109 \par
00110 \par
00111                         {\cf19 break};\par
00112                     \}\par
00113                                             {\cf20 //now il handle the mapped IO stuff}\par
00114                     {\cf19 case} EfiMemoryMappedIO: \{ __fallthrough; \}\par
00115                     {\cf19 case} EfiMemoryMappedIOPortSpace: \{\par
00116                         {\cf19 for} ({\cf18 size_t} page = FirstPage; page < FirstPage + numPages; page++) \{\par
00117 \par
00118                             PageMapEntry& curr = SYSTEM_INFO::GlobalPageMap.Entrys[page]; {\cf20 //-V3539}\par
00119                             curr.isFree = {\cf17 false};{\cf20 //obviously MMIO isn't free}\par
00120                             curr.Type = PageType::MMIO;\par
00121                         \}\par
00122                         {\cf19 break};\par
00123                     \}\par
00124                                                    {\cf20 //and now ill handle usable memory}\par
00125                     {\cf19 case} EfiConventionalMemory: \{\par
00126                         {\cf19 for} ({\cf18 size_t} page = FirstPage; page < FirstPage + numPages; page++) \{\par
00127 \par
00128                             PageMapEntry& curr = SYSTEM_INFO::GlobalPageMap.Entrys[page]; {\cf20 //-V3539}\par
00129                             curr.isFree = {\cf17 true}; {\cf20 //this is free space}\par
00130                             curr.Type = PageType::Free;{\cf20 //and its free}\par
00131                         \}\par
00132                         {\cf19 break};\par
00133                     \}\par
00134                     {\cf19 default}: \{\par
00135                         {\cf20 //if the type is not one of the above i will just set it to reserved}\par
00136                         {\cf20 //this is a catch all for every other type of memory that i don't care about}\par
00137                         {\cf19 for} ({\cf18 size_t} page = FirstPage; page < FirstPage + numPages; page++) \{\par
00138                             PageMapEntry& curr = SYSTEM_INFO::GlobalPageMap.Entrys[page]; {\cf20 //-V3539}\par
00139                             {\cf19 if} (curr.isFree) \{ {\cf20 //only set the type if the page is free}\par
00140                                 curr.isFree = {\cf17 false};\par
00141                                 curr.Type = PageType::EFI_Reserved; {\cf20 //for now i don't differentiate between reserved memory types}\par
00142                             \}\par
00143                         \}\par
00144                     \}\par
00145                     \}\par
00146                 \}\par
00147                 {\cf19 return} {\cf17 true};\par
00148 \par
00149             \}\par
00150         \}\par
00151     \}\par
00152 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ALLOCATION.cpp\par \pard\plain 
{\tc\tcl2 \v SOURCE/SUBSYSTEMS/ALLOCATION/ALLOCATION.cpp}
{\xe \v SOURCE/SUBSYSTEMS/ALLOCATION/ALLOCATION.cpp}
{\bkmkstart AAAAAAAAAM}
{\bkmkend AAAAAAAAAM}
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf20 // This is a personal academic project. Dear PVS-Studio, please check it.}\par
00002 \par
00003 {\cf20 // PVS-Studio Static Code Analyzer for C, C++, C#, and Java: https://pvs-studio.com}\par
00004 \par
00005 {\cf17 extern} {\cf22 "C"} \{\par
00006 {\cf21 #include <gnu-efi/inc/efi.h>}\par
00007 \}\par
00008 {\cf21 #include "HEADER/SUBSYSTEMS/ALLOCATION/ALLOCATION.h"}\par
00009 {\cf21 #include "HEADER/SYTEM_INFO/SYSTEM_INFO.h"}\par
00010 {\cf21 #include "HEADER/STARTUP/PAGE_MAP/PAGE_MAP.h"}\par
00011 {\cf17 namespace }SYSTEM::SUBSYSTEMS::ALLOCATION\{\par
00012     {\cf17 using }PageType = SYSTEM::STARTUP::PAGING::PageType;\par
00013     {\cf18 void}* PhysicalAllocator::AllocatePAge()\par
00014     \{\par
00015         {\cf17 auto}& GlobalPageMap = SYSTEM::SYSTEM_INFO::GlobalPageMap;\par
00016         {\cf20 //iterate over the map and find a single free page.}\par
00017         SYSTEM::STARTUP::PAGING::PageMapEntry* entry = {\cf17 nullptr};\par
00018         {\cf19 for} ({\cf18 size_t} index = 0; index < GlobalPageMap.etries; index++) \{\par
00019             {\cf17 auto}& curr = GlobalPageMap.Entrys[index];\par
00020             {\cf19 if} (curr.Type == PageType::Free) \{\par
00021                 entry = &curr;\par
00022                 entry->isFree = {\cf17 false};\par
00023                 entry->Type = PageType::Allocated;\par
00024                 {\cf19 break};\par
00025             \}\par
00026         \}\par
00027         {\cf19 if} (!entry) \{\par
00028             {\cf19 return} {\cf17 nullptr}; {\cf20 //no free page found}\par
00029         \}\par
00030         PageHeader* page = {\cf17 reinterpret_cast<}PageHeader*{\cf17 >}(entry);\par
00031         page->amoutofPages = 1;\par
00032         page->usable = entry + {\cf17 sizeof}(PageHeader);\par
00033         \par
00034         {\cf19 return} page;;\par
00035     \}\par
00036     {\cf18 bool} PhysicalAllocator::FreePage({\cf18 void}* ptr)\par
00037     \{\par
00038         {\cf19 if} (!ptr) \{ {\cf19 return} {\cf17 false}; \}\par
00039         {\cf18 void}* fullpage = {\cf17 reinterpret_cast<}{\cf18 void}*{\cf17 >}({\cf17 reinterpret_cast<}{\cf18 size_t}{\cf17 >}(ptr) - {\cf17 sizeof}(PageHeader));\par
00040 \par
00041         PageHeader* header = {\cf17 reinterpret_cast<}PageHeader*{\cf17 >}(fullpage); {\cf20 //-V3546 necessary here as we deal with physical memory}\par
00042         {\cf19 if} (header->usable != ptr) \{ {\cf19 return} {\cf17 false}; \} {\cf20 //not a valid pointer}\par
00043         {\cf18 size_t} pagenum = {\cf17 reinterpret_cast<}{\cf18 size_t}{\cf17 >}(fullpage) / EFI_PAGE_SIZE;\par
00044 \par
00045         {\cf17 auto}& globalMap = SYSTEM::SYSTEM_INFO::GlobalPageMap;\par
00046         {\cf19 if} (pagenum > globalMap.etries) \{ {\cf19 return} {\cf17 false}; \}{\cf20 // somehow the address is larger than max installed ram}\par
00047         {\cf17 auto}& Entry = globalMap.Entrys[pagenum]; {\cf20 //-V3539}\par
00048         Entry.isFree = {\cf17 true};\par
00049         Entry.Type = PageType::Free;\par
00050         {\cf19 return} {\cf17 true};\par
00051     \}\par
00052     {\cf18 void}* PhysicalAllocator::AllocatePages({\cf18 size_t} amountOfPages)\par
00053     \{\par
00054 \par
00055         {\cf19 if} (amountOfPages == 0) \{ {\cf19 return} {\cf17 nullptr}; \}{\cf20 //no pages requested}\par
00056         {\cf19 if} (amountOfPages > (SYSTEM_INFO::SystemInfo::GetInstance().installedRam / PageSize) / 2) \{ {\cf19 return} {\cf17 nullptr}; \}{\cf20 //i wont allow allocating more than half of the installed ram in one go.}\par
00057         {\cf18 size_t} pagesFound = 0;\par
00058         {\cf18 void}* firstPage = {\cf17 nullptr};\par
00059         {\cf17 auto}& GlobalPageMap = SYSTEM::SYSTEM_INFO::GlobalPageMap;\par
00060         {\cf19 for} ({\cf18 size_t} index = 0; index < GlobalPageMap.etries; index++) \{\par
00061             {\cf17 auto}& curr = GlobalPageMap.Entrys[index];\par
00062             {\cf19 if} (curr.Type == PageType::Free) \{\par
00063                 {\cf19 if} (pagesFound == 0) \{\par
00064                     firstPage = &curr;\par
00065                 \}\par
00066                 pagesFound++;\par
00067                 curr.isFree = {\cf17 false};\par
00068                 curr.Type = PageType::Allocated;\par
00069             \}\par
00070             {\cf19 else} \{\par
00071                 pagesFound = 0; {\cf20 //reset if we hit a non free page}\par
00072                 firstPage = {\cf17 nullptr};\par
00073             \}\par
00074             {\cf19 if} (pagesFound == amountOfPages) \{\par
00075                 {\cf19 break}; {\cf20 //we found enough pages}\par
00076             \}\par
00077         \}\par
00078         {\cf19 if} (pagesFound < amountOfPages) \{\par
00079             {\cf19 return} {\cf17 nullptr}; {\cf20 //not enough pages found}\par
00080         \}\par
00081         PageHeader* header = {\cf17 reinterpret_cast<}PageHeader*{\cf17 >}(firstPage); {\cf20 //-V3546}\par
00082         header->amoutofPages = amountOfPages; {\cf20 //-V522 //this allowed as this is a pre OS environment and nullptr might actually be a valid address here}\par
00083         header->usable = {\cf17 reinterpret_cast<}{\cf18 void}*{\cf17 >}({\cf17 reinterpret_cast<}{\cf18 size_t}{\cf17 >}(firstPage) + {\cf17 sizeof}(PageHeader));\par
00084         {\cf20 //set the usable area to the first page after the header}\par
00085         {\cf19 for} ({\cf18 size_t} i = 0; i < amountOfPages; i++) \{\par
00086             {\cf17 auto}& curr = GlobalPageMap.Entrys[({\cf17 reinterpret_cast<}{\cf18 size_t}{\cf17 >}(firstPage) / PageSize) + i]; {\cf20 //-V3539}\par
00087             curr.isFree = {\cf17 false};\par
00088             curr.Type = PageType::Allocated;\par
00089         \}\par
00090         {\cf19 return} header->usable; {\cf20 //return the usable area}\par
00091     \}\par
00092     {\cf18 bool} PhysicalAllocator::FreePages({\cf18 void}* ptr)\par
00093     \{\par
00094         {\cf19 if} (!ptr) \{ {\cf19 return} {\cf17 false}; \}{\cf20 //null pointer is not valid}\par
00095         {\cf18 void}* fullpage = {\cf17 reinterpret_cast<}{\cf18 void}*{\cf17 >}({\cf17 reinterpret_cast<}{\cf18 size_t}{\cf17 >}(ptr) - {\cf17 sizeof}(PageHeader));\par
00096         PageHeader* header = {\cf17 reinterpret_cast<}PageHeader*{\cf17 >}(fullpage); {\cf20 //-V3546 necessary here as we deal with physical memory}\par
00097         {\cf19 if} (header->usable != ptr) \{ {\cf19 return} {\cf17 false}; \} {\cf20 //not a valid pointer}\par
00098         {\cf18 size_t} pagenum = {\cf17 reinterpret_cast<}{\cf18 size_t}{\cf17 >}(fullpage) / EFI_PAGE_SIZE;\par
00099         {\cf17 auto}& globalMap = SYSTEM::SYSTEM_INFO::GlobalPageMap;\par
00100         {\cf19 if} (pagenum + header->amoutofPages > globalMap.etries) \{ {\cf19 return} {\cf17 false}; \} {\cf20 //somehow the address is larger than max installed ram}\par
00101         {\cf19 for} ({\cf18 size_t} i = 0; i < header->amoutofPages; i++) \{\par
00102             {\cf17 auto}& Entry = globalMap.Entrys[pagenum + i]; {\cf20 //-V3539}\par
00103             {\cf19 if} (Entry.Type != PageType::Allocated) \{ {\cf19 return} {\cf17 false}; \} {\cf20 //not a valid page}\par
00104             Entry.isFree = {\cf17 true};\par
00105             Entry.Type = PageType::Free;\par
00106         \}\par
00107 \par
00108         {\cf19 return} {\cf17 true};\par
00109     \}\par
00110 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
CONSOLE.cpp\par \pard\plain 
{\tc\tcl2 \v SOURCE/SUBSYSTEMS/CONSOLE/CONSOLE.cpp}
{\xe \v SOURCE/SUBSYSTEMS/CONSOLE/CONSOLE.cpp}
{\bkmkstart AAAAAAAAAN}
{\bkmkend AAAAAAAAAN}
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf20 // This is a personal academic project. Dear PVS-Studio, please check it.}\par
00002 \par
00003 {\cf20 // PVS-Studio Static Code Analyzer for C, C++, C#, and Java: https://pvs-studio.com}\par
00004 \par
00005 {\cf21 #include "../../../HEADER/SUBSYSTEMS/CONSOLE/CONSOLE.h"}\par
00006 {\cf21 #include "../../../HEADER/SUBSYSTEMS/RENDER/RENDER.h"}\par
00007 {\cf21 #include <HEADER/STRING/STRING_F.h>}\par
00008 {\cf21 #include <HEADER/UTILLITY/UTILLITY_F.h>}\par
00009 {\cf17 namespace }SYSTEM \{\par
00010     {\cf17 namespace }SUBSYSTEMS \{\par
00011         {\cf17 namespace }CONSOLE \{\par
00012             {\cf17 class }__CONSOLE__STRUCTURE \{\par
00013             {\cf17 private}:\par
00014                 {\cf17 friend} {\cf18 bool} Console::InitConsole({\cf18 size_t} collums, {\cf18 size_t} rows, {\cf18 size_t} pixelsperRow, {\cf18 size_t} pixelsperCollum);\par
00015             {\cf17 public}:\par
00016                 __CONSOLE__STRUCTURE({\cf17 const} __CONSOLE__STRUCTURE& other) = {\cf17 delete};\par
00017                 __CONSOLE__STRUCTURE(__CONSOLE__STRUCTURE&& other) = {\cf17 delete};\par
00018                 __CONSOLE__STRUCTURE() = {\cf19 default};\par
00019                 __CONSOLE__STRUCTURE& operator=({\cf17 const} __CONSOLE__STRUCTURE& other) = {\cf17 delete};\par
00020                 __CONSOLE__STRUCTURE& operator=(__CONSOLE__STRUCTURE&& other) = {\cf17 delete};\par
00021                 {\cf18 char}* buffer={\cf17 nullptr};\par
00022                 {\cf18 size_t} bufferSize=0;\par
00023                 {\cf18 size_t} collums = 0;\par
00024                 {\cf18 size_t} rows = 0;\par
00025 \par
00026                 {\cf18 size_t} cursorPosRows = 0;\par
00027                 {\cf18 size_t} cursorPosCollums = 0;\par
00028 \par
00029                 {\cf18 size_t} pixelsPerRow = 0;\par
00030                 {\cf18 size_t} pixxelsPerCollum = 0;\par
00031             \};\par
00032             {\cf17 static} __CONSOLE__STRUCTURE& ConsoleStructure() \{\par
00033                 {\cf17 static} __CONSOLE__STRUCTURE str;\par
00034                 {\cf19 return} str;\par
00035             \}\par
00036 \par
00042             {\cf17 static} {\cf18 void} HandleContolChar({\cf18 wchar_t} chr) \{\par
00043                 __CONSOLE__STRUCTURE& console = ConsoleStructure();\par
00044 \par
00045                 {\cf19 switch} (chr) \{\par
00046                 {\cf19 case} {\cf23 '\\n'}: \{\par
00047                     console.cursorPosCollums = 0;\par
00048                     console.cursorPosRows++;\par
00049                     {\cf19 break};\par
00050                 \}\par
00051                 {\cf19 case} {\cf23 '\\t'}: \{\par
00052                     console.cursorPosCollums += tabSize;\par
00053                     {\cf19 break};\par
00054                 \}\par
00055                 {\cf19 case} {\cf23 ' '}: \{\par
00056                     {\cf20 //ill treat the space as a special char}\par
00057                     console.cursorPosCollums++;\par
00058                     {\cf19 break};\par
00059                 \}\par
00060                 {\cf19 default}: \{\par
00061                                         {\cf20 //do nothing for other control chars}\par
00062                     {\cf19 break};\par
00063                 \}\par
00064                 \}\par
00065             \}\par
00066             {\cf17 constexpr} {\cf17 static} {\cf18 bool} isControlChar({\cf18 wchar_t} chr) \{\par
00067                 {\cf19 return} chr == {\cf23 '\\n'} || chr == {\cf23 '\\t'} || chr == {\cf23 ' '};\par
00068             \}\par
00069             {\cf18 bool} Console::InitConsole({\cf18 size_t} collums, {\cf18 size_t} rows, {\cf18 size_t} pixelsperRow, {\cf18 size_t} pixelsperCollum)\par
00070             \{\par
00071                 __CONSOLE__STRUCTURE& console = ConsoleStructure();\par
00072                 console.collums = collums;\par
00073                 console.pixelsPerRow = pixelsperRow;\par
00074                 console.pixxelsPerCollum = pixelsperCollum;\par
00075                 console.rows = rows;\par
00076                 {\cf19 return} {\cf17 true};\par
00077             \}\par
00078             {\cf18 void} Console::WriteLine({\cf17 const} {\cf18 wchar_t}* str)\par
00079             \{\par
00080                 __CONSOLE__STRUCTURE& console = ConsoleStructure();\par
00081                 {\cf17 const} {\cf18 size_t} x = console.pixxelsPerCollum * console.cursorPosCollums;\par
00082                 {\cf17 const} {\cf18 size_t} y = console.pixelsPerRow * console.cursorPosRows;\par
00083                 RENDER::SIMPLE::SimpleDrawString(str, {\cf17 static_cast<}{\cf18 unsigned} {\cf18 int}{\cf17 >}(x), {\cf17 static_cast<}{\cf18 unsigned} {\cf18 int}{\cf17 >}(y));\par
00084                 console.cursorPosRows++;\par
00085 \par
00086             \}\par
00087             {\cf18 void} Console::WriteF({\cf18 size_t} args,{\cf17 const} {\cf18 char}* format, ...)\par
00088             \{\par
00089                 {\cf20 //TODO: implement printf like function}\par
00090                 STD::ignore = args; {\cf20 // to avoid unused parameter warning}\par
00091                 STD::ignore = format; {\cf20 // to avoid unused parameter warning}\par
00092             \}\par
00093             {\cf18 void} Console::Write({\cf17 const} {\cf18 wchar_t}* str)\par
00094             \{\par
00095                 __CONSOLE__STRUCTURE& console = ConsoleStructure();\par
00096                 {\cf19 if} (!str) \{ {\cf19 return}; \} {\cf20 //if str is null do nothing}\par
00097                 {\cf17 const} {\cf18 size_t} len = STD::strlen(str);\par
00098                 {\cf19 for} ({\cf18 size_t} i = 0; i < len + 1; i++) \{\par
00099                     {\cf17 const} {\cf18 size_t} x = console.pixxelsPerCollum * console.cursorPosCollums;\par
00100                     {\cf17 const} {\cf18 size_t} y = console.pixelsPerRow * console.cursorPosRows;\par
00101                     {\cf19 if} (isControlChar(str[i])) \{ {\cf20 //-V3539}\par
00102                         HandleContolChar(str[i]); {\cf20 //-V3539}\par
00103                     \}\par
00104                     {\cf19 else} \{\par
00105                         console.cursorPosCollums++;\par
00106                     \}\par
00107                     RENDER::SIMPLE::SimpleDrawChar({\cf17 static_cast<}{\cf18 unsigned} {\cf18 int}{\cf17 >}(x), {\cf17 static_cast<}{\cf18 unsigned} {\cf18 int}{\cf17 >}(y), str[i]); {\cf20 //-V3539}\par
00108 \par
00109                 \}\par
00110             \}\par
00111             ConsoleInfo QueryConsoleInfo()\par
00112             \{\par
00113                 {\cf19 return} ConsoleInfo();\par
00114             \}\par
00115             {\cf18 void} Console::ClearConsole()\par
00116             \{\par
00117             \}\par
00118             {\cf18 void} Console::Flush()\par
00119             \{\par
00120             \}\par
00121             {\cf18 bool} Console::ToggleANSICodes()\par
00122             \{\par
00123                 {\cf19 return} {\cf17 false};\par
00124             \}\par
00125         \}\par
00126     \}\par
00127 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
RENDER.cpp\par \pard\plain 
{\tc\tcl2 \v SOURCE/SUBSYSTEMS/RENDER/RENDER.cpp}
{\xe \v SOURCE/SUBSYSTEMS/RENDER/RENDER.cpp}
{\bkmkstart AAAAAAAAAO}
{\bkmkend AAAAAAAAAO}
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf20 // This is a personal academic project. Dear PVS-Studio, please check it.}\par
00002 \par
00003 {\cf20 // PVS-Studio Static Code Analyzer for C, C++, C#, and Java: https://pvs-studio.com}\par
00004 \par
00005 {\cf21 #include "../../../HEADER/SUBSYSTEMS/RENDER/RENDER.h"}\par
00006 {\cf21 #include "../../../../FREESTANDING_STD++LIB/HEADER/STRING/STRING_F.h"}\par
00007 {\cf21 #include <stdint.h>}\par
00008 {\cf17 namespace }SYSTEM::SUBSYSTEMS::RENDER \{\par
00009     {\cf17 namespace }SIMPLE \{\par
00010 \par
00011         {\cf18 unsigned} {\cf18 int}* FramebufferBase = {\cf17 nullptr};\par
00012         {\cf18 unsigned} {\cf18 int} FramebufferWidth = 0;\par
00013         {\cf18 unsigned} {\cf18 int} FramebufferHeight = 0;\par
00014         {\cf18 unsigned} {\cf18 int} PixelsPerScanline = 0; {\cf20 // Number of bytes per row in the framebuffer}\par
00015         {\cf20 //i might change the 8X8 BMP to be 16H and 8W //i did change it}\par
00016         SYSTEM::SUBSYSTEMS::RENDER::SIMPLE::CHAR SimpleFont[255] = \{\par
00017             \{\par
00018                  0, {\cf20 // Null character}\par
00019                 0, {\cf20 // No width}\par
00020                 8, {\cf20 // Height of the character}\par
00021                  COLOURS::White, {\cf20 // White color}\par
00022                  \{0\}\par
00023 \par
00024 \par
00025             \},\par
00026             \{\par
00027                  {\cf23 'A'}, {\cf20 // Character 'A'}\par
00028                  8, {\cf20 // Width of the character}\par
00029                  16, {\cf20 // Height of the character}\par
00030                  COLOURS::White, {\cf20 // White color}\par
00031             \{\par
00032                 0b01111110,\par
00033                 0b01000010,\par
00034                 0b01000010, {\cf20 // 0x18}\par
00035                 0b01000010, {\cf20 // 0x18}\par
00036                 0b01000010, {\cf20 // 0x24}\par
00037                 0b01000010, {\cf20 // 0x24}\par
00038                 0b01000010, {\cf20 // 0x3C}\par
00039                 0b01111110, {\cf20 // 0x3C}\par
00040                 0b01000010, {\cf20 // 0x42}\par
00041                 0b01000010, {\cf20 // 0x42}\par
00042                 0b01000010, {\cf20 // 0x42}\par
00043                 0b01000010, {\cf20 // 0x42}\par
00044                 0b01000010, {\cf20 // 0x42}\par
00045                 0b01000010, {\cf20 // 0x42}\par
00046                 0b01000010, {\cf20 // 0x00}\par
00047                 0b00000000{\cf20 // 0x00}\par
00048                 \}\par
00049             \},\par
00050             \{\par
00051                 {\cf23 'B'},\par
00052                 8,\par
00053                 16,\par
00054                 COLOURS::White,\par
00055                 \{\par
00056                 0b00000000, {\cf20 // 0x00}\par
00057                 0b01111100, {\cf20 // 0x00}\par
00058                 0b01000010, {\cf20 // }\par
00059                 0b01000010, {\cf20 // }\par
00060                 0b01000010, {\cf20 // 0x42}\par
00061                 0b01000010, {\cf20 // 0x42}\par
00062                 0b01000010, {\cf20 // 0x42}\par
00063                 0b01111100, {\cf20 // 0x42}\par
00064                 0b01111100, {\cf20 // }\par
00065                 0b01000010, {\cf20 // }\par
00066                 0b01000010, {\cf20 // 0x42}\par
00067                 0b01000010, {\cf20 // 0x42}\par
00068                 0b01000010, {\cf20 // 0x3C}\par
00069                 0b01000010, {\cf20 // 0x3C}\par
00070                 0b01111100, {\cf20 // 0x00}\par
00071                 0b00000000 {\cf20 // 0x00}\par
00072                 \}\par
00073 \par
00074             \},\par
00075             \{\par
00076                 .c = {\cf23 'C'},\par
00077                 .width = 8,\par
00078                 .height = 16,\par
00079                 .Color = COLOURS::White,\par
00080                 .BMP = \{\par
00081                 0b00000000, {\cf20 // 0x00}\par
00082                 0b01111110, {\cf20 // 0x00}\par
00083                 0b01000000, {\cf20 // 0x3C}\par
00084                 0b01000000, {\cf20 // 0x3C}\par
00085                 0b01000000, {\cf20 // 0x42}\par
00086                 0b01000000, {\cf20 // 0x42}\par
00087                 0b01000000, {\cf20 // 0x40}\par
00088                 0b01000000, {\cf20 // 0x40}\par
00089                 0b01000000, {\cf20 // 0x40}\par
00090                 0b01000000, {\cf20 // 0x40}\par
00091                 0b01000000, {\cf20 // 0x42}\par
00092                 0b01000000, {\cf20 // 0x42}\par
00093                 0b01000000, {\cf20 // 0x3C}\par
00094                 0b01000000, {\cf20 // 0x3C}\par
00095                 0b01111110, {\cf20 // 0x00}\par
00096                 0b00000000 {\cf20 // 0x00}\par
00097                 \}\par
00098             \},\par
00099             \{\par
00100                 .c ={\cf23 'D'},\par
00101                 .width = 8,\par
00102                 .height = 16,\par
00103                 .Color = COLOURS::White,\par
00104                 .BMP = \{\par
00105                 0b00000000, {\cf20 // 0x00}\par
00106                 0b01111100, {\cf20 // 0x78}\par
00107                 0b01000010, {\cf20 // 0x44}\par
00108                 0b01000010, {\cf20 // 0x42}\par
00109                 0b01000010, {\cf20 // 0x42}\par
00110                 0b01000010, {\cf20 // 0x42}\par
00111                 0b01000010, {\cf20 // 0x42}\par
00112                 0b01000010, {\cf20 // 0x42}\par
00113                 0b01000010, {\cf20 // 0x42}\par
00114                 0b01000010, {\cf20 // 0x42}\par
00115                 0b01000010, {\cf20 // 0x42}\par
00116                 0b01000010, {\cf20 // 0x42}\par
00117                 0b01000010, {\cf20 // 0x42}\par
00118                 0b01000010, {\cf20 // 0x44}\par
00119                 0b01111100, {\cf20 // 0x78}\par
00120                 0b00000000 {\cf20 // 0x00}\par
00121                 \}\par
00122             \},\par
00123             \{\par
00124                 .c = {\cf23 'E'},\par
00125                 .width = 8,\par
00126                 .height = 16,\par
00127                 .Color = COLOURS::White,\par
00128                 .BMP = \{\par
00129                 0b00000000, {\cf20 // 0x00}\par
00130                 0b01111110, {\cf20 // 0x7E}\par
00131                 0b01000000, {\cf20 // 0x7E}\par
00132                 0b01000000, {\cf20 // 0x40}\par
00133                 0b01000000, {\cf20 // 0x40}\par
00134                 0b01000000, {\cf20 // 0x40}\par
00135                 0b01000000, {\cf20 // 0x40}\par
00136                 0b01111110, {\cf20 // 0x3C}\par
00137                 0b01111110, {\cf20 // 0x3C}\par
00138                 0b01000000, {\cf20 // 0x40}\par
00139                 0b01000000, {\cf20 // 0x40}\par
00140                 0b01000000, {\cf20 // 0x40}\par
00141                 0b01000000, {\cf20 // 0x40}\par
00142                 0b01000000, {\cf20 // 0x7E}\par
00143                 0b01111110, {\cf20 // 0x7E}\par
00144                 0b00000000 {\cf20 // 0x00}\par
00145                 \}\par
00146             \},\par
00147             \{\par
00148                 .c = {\cf23 'F'},\par
00149                 .width = 8,\par
00150                 .height = 16,\par
00151                 .Color = COLOURS::White,\par
00152                 .BMP = \{\par
00153                 0b00000000, {\cf20 // 0x00}\par
00154                 0b01111110, {\cf20 // 0x00}\par
00155                 0b01000000, {\cf20 // 0x7E}\par
00156                 0b01000000, {\cf20 // 0x7E}\par
00157                 0b01000000, {\cf20 // 0x40}\par
00158                 0b01000000, {\cf20 // 0x40}\par
00159                 0b01000000, {\cf20 // 0x40}\par
00160                 0b01111110, {\cf20 // 0x40}\par
00161                 0b01111110, {\cf20 // 0x3C}\par
00162                 0b01000000, {\cf20 // 0x3C}\par
00163                 0b01000000, {\cf20 // 0x40}\par
00164                 0b01000000, {\cf20 // 0x40}\par
00165                 0b01000000, {\cf20 // 0x40}\par
00166                 0b01000000, {\cf20 // 0x40}\par
00167                 0b00000000, {\cf20 // 0x00}\par
00168                 0b00000000 {\cf20 // 0x00}\par
00169                 \}\par
00170 \},\par
00171 \{\par
00172     .c = {\cf23 'G'},\par
00173     .width = 8,\par
00174         .height = 16,\par
00175         .Color = COLOURS::White,\par
00176         .BMP = \{\par
00177             0b00000000, {\cf20 // 0x00}\par
00178             0b01111110, {\cf20 // 0x00}\par
00179             0b01000010, {\cf20 // 0x3C}\par
00180             0b01000010, {\cf20 // 0x3C}\par
00181             0b01000010, {\cf20 // 0x42}\par
00182             0b01000000, {\cf20 // 0x42}\par
00183             0b01000000, {\cf20 // 0x40}\par
00184             0b01000000, {\cf20 // 0x40}\par
00185             0b01001110, {\cf20 // 0x4E}\par
00186             0b01001110, {\cf20 // 0x4E}\par
00187             0b01000010, {\cf20 // 0x42}\par
00188             0b01000010, {\cf20 // 0x42}\par
00189             0b01000010, {\cf20 // 0x3C}\par
00190             0b01000010, {\cf20 // 0x3C}\par
00191             0b01111110, {\cf20 // 0x00}\par
00192             0b00000000 {\cf20 // 0x00}\par
00193 \}\par
00194 \},\par
00195             \{\par
00196                 .c = {\cf23 'H'},\par
00197                 .width = 8,\par
00198                 .height = 16,\par
00199                 .Color = COLOURS::White,\par
00200                 .BMP = \{\par
00201                 0b00000000, {\cf20 // 0x00}\par
00202                 0b01000010, {\cf20 // 0x00}\par
00203                 0b01000010, {\cf20 // 0x42}\par
00204                 0b01000010, {\cf20 // 0x42}\par
00205                 0b01000010, {\cf20 // 0x42}\par
00206                 0b01000010, {\cf20 // 0x42}\par
00207                 0b01000010, {\cf20 // 0x7E}\par
00208                 0b01111110, {\cf20 // 0x7E}\par
00209                 0b01111110, {\cf20 // 0x42}\par
00210                 0b01000010, {\cf20 // 0x42}\par
00211                 0b01000010, {\cf20 // 0x42}\par
00212                 0b01000010, {\cf20 // 0x42}\par
00213                 0b01000010, {\cf20 // 0x00}\par
00214                 0b01000010, {\cf20 // 0x00}\par
00215                 0b01000010,{\cf20 // 0x00}\par
00216                 0b00000000 {\cf20 // 0x00}\par
00217                 \}\par
00218             \},\par
00219             \{\par
00220                 .c = {\cf23 'I'},\par
00221                 .width = 8,\par
00222                 .height = 16,\par
00223                 .Color = COLOURS::White,\par
00224                 .BMP = \{\par
00225                 0b00000000, {\cf20 // 0x00}\par
00226                 0b00111000, {\cf20 // 0x00}\par
00227                 0b00010000, {\cf20 // 0x3C}\par
00228                 0b00010000, {\cf20 // 0x3C}\par
00229                 0b00010000, {\cf20 // 0x18}\par
00230                 0b00010000, {\cf20 // 0x18}\par
00231                 0b00010000, {\cf20 // 0x18}\par
00232                 0b00010000, {\cf20 // 0x18}\par
00233                 0b00010000, {\cf20 // 0x3C}\par
00234                 0b00010000, {\cf20 // 0x3C}\par
00235                 0b00010000, {\cf20 // 0x18}\par
00236                 0b00010000, {\cf20 // 0x18}\par
00237                 0b00010000, {\cf20 // 0x3C}\par
00238                 0b00010000, {\cf20 // 0x3C}\par
00239                 0b00111000, {\cf20 // 0x00}\par
00240                 0b00000000 {\cf20 // 0x00}\par
00241                 \}\par
00242             \},\par
00243             \{\par
00244                 .c = {\cf23 'J'},\par
00245                 .width = 8,\par
00246                 .height = 16,\par
00247                 .Color = COLOURS::White,\par
00248                 .BMP = \{\par
00249                 0b00000000, {\cf20 // 0x00}\par
00250                 0b00000010, {\cf20 // 0x00}\par
00251                 0b00000010, {\cf20 // 0x0E}\par
00252                 0b00000010, {\cf20 // 0x0E}\par
00253                 0b00000010, {\cf20 // 0x04}\par
00254                 0b00000010, {\cf20 // 0x04}\par
00255                 0b00000010, {\cf20 // 0x04}\par
00256                 0b00000010, {\cf20 // 0x04}\par
00257                 0b00000010, {\cf20 // 0x44}\par
00258                 0b00000010, {\cf20 // 0x44}\par
00259                 0b01000010, {\cf20 // 0x44}\par
00260                 0b01000010, {\cf20 // 0x38}\par
00261                 0b01000010, {\cf20 // 0x44}\par
00262                 0b01000010, {\cf20 // 0x38}\par
00263                 0b00111100, {\cf20 // 0x00}\par
00264                 0b00000000 {\cf20 // 0x00}\par
00265                 \}\par
00266             \},\par
00267             \{\par
00268                 .c = {\cf23 'K'},\par
00269                 .width = 8,\par
00270                 .height = 16,\par
00271                 .Color = COLOURS::White,\par
00272                 .BMP = \{\par
00273                 0b00000000, {\cf20 // 0x00}\par
00274                 0b01000010, {\cf20 // 0x00}\par
00275                 0b01000010, {\cf20 // 0x42}\par
00276                 0b01000010, {\cf20 // 0x42}\par
00277                 0b01000010, {\cf20 // 0x44}\par
00278                 0b01000010, {\cf20 // 0x44}\par
00279                 0b01000010, {\cf20 // 0x58}\par
00280                 0b01111100, {\cf20 // 0x58}\par
00281                 0b01111100, {\cf20 // 0x70}\par
00282                 0b01000010, {\cf20 // 0x70}\par
00283                 0b01000010, {\cf20 // 0x44}\par
00284                 0b01000001, {\cf20 // 0x44}\par
00285                 0b01000001, {\cf20 // 0x42}\par
00286                 0b01000001, {\cf20 // 0x42}\par
00287                 0b01000001, {\cf20 // 0x00}\par
00288                 0b00000000 {\cf20 // 0x00}\par
00289                 \}\par
00290             \},\par
00291             \{\par
00292                 .c = {\cf23 'L'},\par
00293                 .width = 8,\par
00294                 .height = 16,\par
00295                 .Color = COLOURS::White,\par
00296                 .BMP = \{\par
00297                     0b00000000, {\cf20 // 0x00}\par
00298                     0b01000000, {\cf20 // 0x00}\par
00299                     0b01000000, {\cf20 // 0x40}\par
00300                     0b01000000, {\cf20 // 0x40}\par
00301                     0b01000000, {\cf20 // 0x40}\par
00302                     0b01000000, {\cf20 // 0x40}\par
00303                     0b01000000, {\cf20 // 0x40}\par
00304                     0b01000000, {\cf20 // 0x40}\par
00305                     0b01000000, {\cf20 // 0x40}\par
00306                     0b01000000, {\cf20 // 0x40}\par
00307                     0b01000000, {\cf20 // 0x40}\par
00308                     0b01000000, {\cf20 // 0x40}\par
00309                     0b01000000, {\cf20 // 0x7E}\par
00310                     0b01000000, {\cf20 // 0x7E}\par
00311                     0b01111110, {\cf20 // 0x00}\par
00312                     0b00000000 {\cf20 // 0x00}\par
00313                     \}\par
00314             \},\par
00315             \{\par
00316                 .c = {\cf23 'M'},\par
00317                 .width = 8,\par
00318                 .height = 16,\par
00319                 .Color = COLOURS::White,\par
00320                 .BMP = \{\par
00321                     0b00000000, {\cf20 // 0x00}\par
00322                     0b01000010, {\cf20 // 0x42}\par
00323                     0b01000010, {\cf20 // 0x42}\par
00324                     0b01100110, {\cf20 // 0x66}\par
00325                     0b01100110, {\cf20 // 0x66}\par
00326                     0b01011010, {\cf20 // 0x5A}\par
00327                     0b01011010, {\cf20 // 0x5A}\par
00328                     0b01000010, {\cf20 // 0x42}\par
00329                     0b01000010, {\cf20 // 0x42}\par
00330                     0b01000010, {\cf20 // 0x42}\par
00331                     0b01000010, {\cf20 // 0x42}\par
00332                     0b01000010, {\cf20 // 0x42}\par
00333                     0b01000010, {\cf20 // 0x42}\par
00334                     0b01000010, {\cf20 // 0x42}\par
00335                     0b01000010, {\cf20 // 0x42}\par
00336                     0b00000000 {\cf20 // 0x00}\par
00337                 \}\par
00338             \},\par
00339             \{\par
00340                 .c = {\cf23 'N'},\par
00341                 .width = 8,\par
00342                 .height = 16,\par
00343                 .Color = COLOURS::White,\par
00344                 .BMP = \{\par
00345                     0b00000000, {\cf20 // 0x00}\par
00346                     0b01000010, {\cf20 // 0x42}\par
00347                     0b01000010, {\cf20 // 0x42}\par
00348                     0b01000010, {\cf20 // 0x42}\par
00349                     0b01100010, {\cf20 // 0x66}\par
00350                     0b01100010, {\cf20 // 0x66}\par
00351                     0b01011010, {\cf20 // 0x5A}\par
00352                     0b01011010, {\cf20 // 0x5A}\par
00353                     0b01000110, {\cf20 // 0x44}\par
00354                     0b01000110, {\cf20 // 0x44}\par
00355                     0b01000010, {\cf20 // 0x42}\par
00356                     0b01000010, {\cf20 // 0x42}\par
00357                     0b01000010, {\cf20 // 0x42}\par
00358                     0b01000010, {\cf20 // 0x42}\par
00359                     0b01000010, {\cf20 // 0x42}\par
00360                     0b00000000 {\cf20 // 0x00}\par
00361                 \}\par
00362             \},\par
00363             \{\par
00364                 .c = {\cf23 'O'},\par
00365                 .width = 8,\par
00366                 .height = 16,\par
00367                 .Color = COLOURS::White,\par
00368                 .BMP = \{\par
00369                     0b00000000, {\cf20 // 0x00}\par
00370                     0b01111110, {\cf20 // 0x00}\par
00371                     0b01000010, {\cf20 // 0x3C}\par
00372                     0b01000010, {\cf20 // 0x3C}\par
00373                     0b01000010, {\cf20 // 0x42}\par
00374                     0b01000010, {\cf20 // 0x42}\par
00375                     0b01000010, {\cf20 // 0x42}\par
00376                     0b01000010, {\cf20 // 0x42}\par
00377                     0b01000010, {\cf20 // 0x42}\par
00378                     0b01000010, {\cf20 // 0x42}\par
00379                     0b01000010, {\cf20 // 0x3C}\par
00380                     0b01000010, {\cf20 // 0x3C}\par
00381                     0b01000010, {\cf20 // 0x00}\par
00382                     0b01000010, {\cf20 // 0x00}\par
00383                     0b01111110, {\cf20 // 0x00}\par
00384                     0b00000000 {\cf20 // 0x00}\par
00385                 \}\par
00386             \},\par
00387             \{\par
00388                 .c = {\cf23 'P'},\par
00389                 .width = 8,\par
00390                 .height = 16,\par
00391                 .Color = COLOURS::White,\par
00392                 .BMP = \{\par
00393                     0b00000000, {\cf20 // 0x00}\par
00394                     0b01111100, {\cf20 // 0x00}\par
00395                     0b01000010, {\cf20 // 0x3C}\par
00396                     0b01000010, {\cf20 // 0x3C}\par
00397                     0b01000010, {\cf20 // 0x42}\par
00398                     0b01000010, {\cf20 // 0x42}\par
00399                     0b01000010, {\cf20 // 0x42}\par
00400                     0b01111100, {\cf20 // 0x42}\par
00401                     0b01111100, {\cf20 // 0x3C}\par
00402                     0b01000000, {\cf20 // 0x3C}\par
00403                     0b01000000, {\cf20 // 0x40}\par
00404                     0b01000000, {\cf20 // 0x40}\par
00405                     0b01000000, {\cf20 // 0x40}\par
00406                     0b01000000, {\cf20 // 0x40}\par
00407                     0b01000000, {\cf20 // 0x00}\par
00408                     0b00000000 \par
00409                 \}\par
00410             \},\par
00411             \{\par
00412                 .c = {\cf23 'Q'},\par
00413                 .width = 8,\par
00414                 .height = 16,\par
00415                 .Color = COLOURS::White,\par
00416                 .BMP = \{\par
00417                     0b00000000,  {\cf20 // 0x00}\par
00418                     0b01111110,  {\cf20 // 0x00}\par
00419                     0b01000010,  {\cf20 // 0x3C}\par
00420                     0b01000010,  {\cf20 // 0x3C}\par
00421                     0b01000010,  {\cf20 // 0x42}\par
00422                     0b01000010,  {\cf20 // 0x42}\par
00423                     0b01000010,  {\cf20 // 0x42}\par
00424                     0b01000010,  {\cf20 // 0x42}\par
00425                     0b01000010,  {\cf20 // 0x4E}\par
00426                     0b01000010,  {\cf20 // 0x4E}\par
00427                     0b01000010,  {\cf20 // 0x42}\par
00428                     0b01001010,  {\cf20 // 0x42}\par
00429                     0b01001010,  {\cf20 // 0x3C}\par
00430                     0b01001010,  {\cf20 // 0x3C}\par
00431                     0b01111110,  {\cf20 // 0x00}\par
00432                     0b00000000 {\cf20 // 0x00}\par
00433                 \}\par
00434             \},\par
00435             \{\par
00436                 .c = {\cf23 'R'},\par
00437                 .width = 8,\par
00438                 .height = 16,\par
00439                 .Color = COLOURS::White,\par
00440                 .BMP = \{\par
00441                     0b00000000, {\cf20 // 0x00}\par
00442                     0b01111100, {\cf20 // 0x00}\par
00443                     0b01000010, {\cf20 // 0x3C}\par
00444                     0b01000010, {\cf20 // 0x3C}\par
00445                     0b01000010, {\cf20 // 0x42}\par
00446                     0b01000010, {\cf20 // 0x42}\par
00447                     0b01000010, {\cf20 // 0x42}\par
00448                     0b01111100, {\cf20 // 0x42}\par
00449                     0b01111100, {\cf20 // 0x3C}\par
00450                     0b01000010, {\cf20 // 0x3C}\par
00451                     0b01000010, {\cf20 // 0x44}\par
00452                     0b01000010, {\cf20 // 0x44}\par
00453                     0b01000010, {\cf20 // 0x42}\par
00454                     0b01000010, {\cf20 // 0x42}\par
00455                     0b01000000, {\cf20 // 0x00}\par
00456                     0b00000000 {\cf20 // 0x00}\par
00457                 \}\par
00458             \},\par
00459             \{\par
00460                 .c = {\cf23 'S'},\par
00461                 .width = 8,\par
00462                 .height = 16,\par
00463                 .Color = COLOURS::White,\par
00464                 .BMP = \{\par
00465                     0b00000000, {\cf20 // 0x00}\par
00466                     0b00111100, {\cf20 // 0x3C}\par
00467                     0b01000010, {\cf20 // 0x3C}\par
00468                     0b01000010, {\cf20 // 0x42}\par
00469                     0b01000000, {\cf20 // 0x42}\par
00470                     0b01000000, {\cf20 // 0x42}\par
00471                     0b01000000, {\cf20 // 0x3C}\par
00472                     0b00111100, {\cf20 // 0x3C}\par
00473                     0b00111100, {\cf20 // 0x1E}\par
00474                     0b00000010, {\cf20 // 0x1E}\par
00475                     0b00000010, {\cf20 // 0x42}\par
00476                     0b00000010, {\cf20 // 0x42}\par
00477                     0b01000010, {\cf20 // 0x3C}\par
00478                     0b01000010, {\cf20 // 0x3C}\par
00479                     0b00111100, {\cf20 // 0x00}\par
00480                     0b00000000 {\cf20 // 0x00}\par
00481                 \}\par
00482             \},\par
00483             \{\par
00484                 .c = {\cf23 'T'},\par
00485                 .width = 8,\par
00486                 .height = 16,\par
00487                 .Color = COLOURS::White,\par
00488                 .BMP = \{\par
00489                     0b00000000, {\cf20 // 0x00}\par
00490                     0b01111110, {\cf20 // 0x7E}\par
00491                     0b00010000, {\cf20 // 0x18}\par
00492                     0b00010000, {\cf20 // 0x18}\par
00493                     0b00010000, {\cf20 // 0x18}\par
00494                     0b00010000, {\cf20 // 0x18}\par
00495                     0b00010000, {\cf20 // 0x18}\par
00496                     0b00010000, {\cf20 // 0x18}\par
00497                     0b00010000, {\cf20 // 0x18}\par
00498                     0b00010000, {\cf20 // 0x18}\par
00499                     0b00010000, {\cf20 // 0x18}\par
00500                     0b00010000, {\cf20 // 0x18}\par
00501                     0b00010000, {\cf20 // 0x18}\par
00502                     0b00010000, {\cf20 // 0x18}\par
00503                     0b00010000, {\cf20 // 0x18}\par
00504                     0b00000000 {\cf20 // 0x00}\par
00505                      \}\par
00506             \},\par
00507             \{\par
00508                 .c = {\cf23 'U'},\par
00509                 .width = 8,\par
00510                 .height = 16,\par
00511                 .Color = COLOURS::White,\par
00512                 .BMP = \{\par
00513                     0b00000000, {\cf20 // 0x00}\par
00514                     0b01000010, {\cf20 // 0x42}\par
00515                     0b01000010, {\cf20 // 0x42}\par
00516                     0b01000010, {\cf20 // 0x42}\par
00517                     0b01000010, {\cf20 // 0x42}\par
00518                     0b01000010, {\cf20 // 0x42}\par
00519                     0b01000010, {\cf20 // 0x42}\par
00520                     0b01000010, {\cf20 // 0x42}\par
00521                     0b01000010, {\cf20 // 0x42}\par
00522                     0b01000010, {\cf20 // 0x42}\par
00523                     0b01000010, {\cf20 // 0x42}\par
00524                     0b01000010, {\cf20 // 0x42}\par
00525                     0b01000010, {\cf20 // 0x42}\par
00526                     0b01000010, {\cf20 // 0x42}\par
00527                     0b00111100, {\cf20 // 0x3C}\par
00528                     0b00000000 {\cf20 // 0x00}\par
00529                     \}\par
00530             \},\par
00531             \{\par
00532 .c = {\cf23 'V'},\par
00533                 .width = 8,\par
00534                 .height = 16,\par
00535                 .Color = COLOURS::White,\par
00536                 .BMP = \{\par
00537                     0b00000000, {\cf20 // 0x00}\par
00538                     0b00000000, {\cf20 // 0x00}\par
00539                     0b01000010, {\cf20 // 0x42}\par
00540                     0b01000010, {\cf20 // 0x42}\par
00541                     0b01000010, {\cf20 // 0x42}\par
00542                     0b01000010, {\cf20 // 0x42}\par
00543                     0b01000010, {\cf20 // 0x42}\par
00544                     0b01000010, {\cf20 // 0x42}\par
00545                     0b00100100, {\cf20 // 0x24}\par
00546                     0b00100100, {\cf20 // 0x24}\par
00547                     0b00011000, {\cf20 // 0x18}\par
00548                     0b00011000, {\cf20 // 0x18}\par
00549                     0b00011000, {\cf20 // 0x18}\par
00550                     0b00011000, {\cf20 // 0x18}\par
00551                     0b00000000, {\cf20 // 0x00}\par
00552                     0b00000000 {\cf20 // 0x00}\par
00553                 \}\par
00554             \},\par
00555             \{\par
00556                 .c = {\cf23 'W'},\par
00557                 .width = 8,\par
00558                 .height = 16,\par
00559                 .Color = COLOURS::White,\par
00560                 .BMP = \{\par
00561                     0b00000000,\par
00562                     0b01000010, {\cf20 // 0x42}\par
00563                     0b01000010, {\cf20 // 0x42}\par
00564                     0b01000010, {\cf20 // 0x42}\par
00565                     0b01000010, {\cf20 // 0x42}\par
00566                     0b01000010, {\cf20 // 0x42}\par
00567                     0b01000010, {\cf20 // 0x42}\par
00568                     0b01000010, {\cf20 // 0x42}\par
00569                     0b01011010, {\cf20 // 0x5A}\par
00570                     0b01011010, {\cf20 // 0x5A}\par
00571                     0b01011010, {\cf20 // 0x5A}\par
00572                     0b01011010, {\cf20 // 0x5A}\par
00573                     0b01011010, {\cf20 // 0x5A}\par
00574                     0b01100110, {\cf20 // 0x66}\par
00575                     0b01100110, {\cf20 // 0x66}\par
00576                     0b00000000 {\cf20 // 0x00}\par
00577                 \}\par
00578             \},\par
00579             \{\par
00580                 .c = {\cf23 'X'},\par
00581                 .width = 8,\par
00582                 .height = 16,\par
00583                 .Color = COLOURS::White,\par
00584                 .BMP = \{\par
00585                     0b00000000, {\cf20 // 0x00}\par
00586                     0b01000010, {\cf20 // 0x42}\par
00587                     0b01000010, {\cf20 // 0x42}\par
00588                     0b01000010, {\cf20 // 0x42}\par
00589                     0b00100100, {\cf20 // 0x24}\par
00590                     0b00100100, {\cf20 // 0x24}\par
00591                     0b00011000, {\cf20 // 0x18}\par
00592                     0b00011000, {\cf20 // 0x18}\par
00593                     0b00100100, {\cf20 // 0x24}\par
00594                     0b00100100, {\cf20 // 0x24}\par
00595                     0b01000010, {\cf20 // 0x42}\par
00596                     0b01000010, {\cf20 // 0x42}\par
00597                     0b01000010, {\cf20 // 0x42}\par
00598                     0b01000010, {\cf20 // 0x42}\par
00599                     0b00000000 {\cf20 // 0x00}\par
00600                     \}\par
00601             \},\par
00602             \{\par
00603                 .c = {\cf23 'Y'},\par
00604                 .width = 8,\par
00605                 .height = 16,\par
00606                 .Color = COLOURS::White,\par
00607                 .BMP = \{\par
00608                     0b00000000, {\cf20 // 0x00}\par
00609                     0b00000000, {\cf20 // 0x00}\par
00610                     0b01000010, {\cf20 // 0x42}\par
00611                     0b01000010, {\cf20 // 0x42}\par
00612                     0b00100100, {\cf20 // 0x24}\par
00613                     0b00100100, {\cf20 // 0x24}\par
00614                     0b00011000, {\cf20 // 0x18}\par
00615                     0b00011000, {\cf20 // 0x18}\par
00616                     0b00011000, {\cf20 // 0x18}\par
00617                     0b00011000, {\cf20 // 0x18}\par
00618                     0b00011000, {\cf20 // 0x18}\par
00619                     0b00011000, {\cf20 // 0x18}\par
00620                     0b00011000, {\cf20 // 0x18}\par
00621                     0b00011000, {\cf20 // 0x18}\par
00622                     0b00000000, {\cf20 // 0x00}\par
00623                     0b00000000 {\cf20 // 0x00}\par
00624                     \}\par
00625             \},\par
00626             \{\par
00627                 .c = {\cf23 'Z'},\par
00628                 .width = 8,\par
00629                 .height = 16,\par
00630                 .Color = COLOURS::White,\par
00631                 .BMP = \{\par
00632                     0b00000000, {\cf20 // 0x00}\par
00633                     0b00000000, {\cf20 // 0x00}\par
00634                     0b01111110, {\cf20 // 0x7E}\par
00635                     0b01111110, {\cf20 // 0x7E}\par
00636                     0b00000100, {\cf20 // 0x04}\par
00637                     0b00000100, {\cf20 // 0x04}\par
00638                     0b00001000, {\cf20 // 0x08}\par
00639                     0b00001000, {\cf20 // 0x08}\par
00640                     0b00010000, {\cf20 // 0x10}\par
00641                     0b00010000, {\cf20 // 0x10}\par
00642                     0b00100000, {\cf20 // 0x20}\par
00643                     0b00100000, {\cf20 // 0x20}\par
00644                     0b01111110, {\cf20 // 0x7E}\par
00645                     0b01111110, {\cf20 // 0x7E}\par
00646                     0b00000000, {\cf20 // 0x00}\par
00647                     0b00000000 {\cf20 // 0x00}\par
00648                 \}\par
00649             \},\par
00650             \{\par
00651                 .c = {\cf23 'a'},\par
00652                 .width =8,\par
00653                 .height=16,\par
00654                 .Color = COLOURS::White,\par
00655                 .BMP = \{\par
00656                     0b00000000,\par
00657                     0b0,\par
00658                     0b0,\par
00659                     0b0,\par
00660                     0b0,\par
00661                     0b0,\par
00662                     0b0,\par
00663                     0b01111110,\par
00664                     0b00000010,\par
00665                     0b00000010,\par
00666                     0b01111110,\par
00667                     0b01000010,\par
00668                     0b01000010,\par
00669                     0b01111110,\par
00670                     0b00000000\par
00671 \par
00672 \}\par
00673             \},\par
00674             \{\par
00675                 .c={\cf23 'b'},\par
00676                 .width = 8,\par
00677                 .height=16,\par
00678                 .Color = COLOURS::White,\par
00679                 .BMP = \{\par
00680                     0b00000000,\par
00681                     0b01000000,\par
00682                     0b01000000,\par
00683                     0b01000000,\par
00684                     0b01000000,\par
00685                     0b01000000,\par
00686                     0b01000000,\par
00687                     0b01000000,\par
00688                     0b01111100,\par
00689                     0b01000010,\par
00690                     0b01000010,\par
00691                     0b01000010,\par
00692                     0b01000010,\par
00693                     0b01000010,\par
00694                     0b01111100,\par
00695                     0b00000000\par
00696 \}\par
00697             \},\par
00698             \{\par
00699                 .c={\cf23 'c'},\par
00700                 .width=8,\par
00701                 .height=16,\par
00702                 .Color=COLOURS::White,\par
00703                 .BMP = \{\par
00704                     0b00000000,\par
00705                     0b0,\par
00706                     0b0,\par
00707                     0b0,\par
00708                     0b0,\par
00709                     0b0,\par
00710                     0b0,\par
00711                     0b0,\par
00712                     0b00111110,\par
00713                     0b01000000,\par
00714                     0b01000000,\par
00715                     0b01000000,\par
00716                     0b01000000,\par
00717                     0b01000000,\par
00718                     0b00111110,\par
00719                     0b00000000\par
00720 \}\par
00721             \},\par
00722             \{\par
00723                 .c={\cf23 'd'},\par
00724                 .width=8,\par
00725                 .height=16,\par
00726                 .Color=COLOURS::White,\par
00727                 .BMP = \{\par
00728                     0b00000000,\par
00729                     0b00000010,\par
00730                     0b00000010,\par
00731                     0b00000010,\par
00732                     0b00000010,\par
00733                     0b00000010,\par
00734                     0b00000010,\par
00735                     0b00000010,\par
00736                     0b00111110,\par
00737                     0b01000010,\par
00738                     0b01000010,\par
00739                     0b01000010,\par
00740                     0b01000010,\par
00741                     0b01000010,\par
00742                     0b00111100,\par
00743                     0b00000000\par
00744 \}\par
00745             \},\par
00746             \{\par
00747                 .c={\cf23 'e'},\par
00748                 .width=8,\par
00749                 .height=16,\par
00750                 .Color=COLOURS::White,\par
00751                 .BMP = \{\par
00752                     0b00000000,\par
00753                     0b0,\par
00754                     0b0,\par
00755                     0b0,\par
00756                     0b0,\par
00757                     0b0,\par
00758                     0b00111100,\par
00759                     0b01000010,\par
00760                     0b01000010,\par
00761                     0b01111110,\par
00762                     0b01000000,\par
00763                     0b01000000,\par
00764                     0b01000000,\par
00765                     0b01000000,\par
00766                     0b00111110,\par
00767                     0b00000000\par
00768 \}\par
00769             \},\par
00770             \{\par
00771                 .c={\cf23 'f'},\par
00772                 .width=8,\par
00773                 .height=16,\par
00774                 .Color=COLOURS::White,\par
00775                 .BMP = \{\par
00776                     0b00000000,\par
00777                     0b00001110,\par
00778                     0b00010000,\par
00779                     0b00010000,\par
00780                     0b00010000,\par
00781                     0b00010000,\par
00782                     0b00010000,\par
00783                     0b00010000,\par
00784                     0b00111000,\par
00785                     0b00010000,\par
00786                     0b00010000,\par
00787                     0b00010000,\par
00788                     0b00010000,\par
00789                     0b00010000,\par
00790                     0b00010000,\par
00791                     0b00000000\par
00792 \par
00793 \}\par
00794             \},\par
00795             \{\par
00796                 .c={\cf23 'g'},\par
00797                 .width=8,\par
00798                 .height=16,\par
00799                 .Color=COLOURS::White,\par
00800                 .BMP = \{\par
00801                     0b00000000,\par
00802                     0b0,\par
00803                     0b0,\par
00804                     0b0,\par
00805                     0b0,\par
00806                     0b0,\par
00807                     0b01111110,\par
00808                     0b01000010,\par
00809                     0b01000010,\par
00810                     0b01000010,\par
00811                     0b01111110,\par
00812                     0b00000010,\par
00813                     0b00000010,\par
00814                     0b00000010,\par
00815                     0b01111110,\par
00816                     0b00000000\par
00817 \}\par
00818             \},\par
00819             \{\par
00820                 .c={\cf23 'h'},\par
00821                 .width=8,\par
00822                 .height=16,\par
00823                 .Color=COLOURS::White,\par
00824                 .BMP = \{\par
00825                     0b00000000,\par
00826                     0b01000000,\par
00827                     0b01000000,\par
00828                     0b01000000,\par
00829                     0b01000000,\par
00830                     0b01000000,\par
00831                     0b01000000,\par
00832                     0b01000000,\par
00833                     0b01000000,\par
00834                     0b01111110,\par
00835                     0b01000010,\par
00836                     0b01000010,\par
00837                     0b01000010,\par
00838                     0b01000010,\par
00839                     0b01000010,\par
00840                     0b00000000\par
00841 \}\par
00842             \},\par
00843             \{\par
00844                 .c={\cf23 'i'},\par
00845                 .width=8,\par
00846                 .height=16,\par
00847                 .Color=COLOURS::White,\par
00848                 .BMP = \{\par
00849                     0b00000000,\par
00850                     0b00000000,\par
00851                     0b00001000,\par
00852                     0b00001000,\par
00853                     0b00000000,\par
00854                     0b00000000,\par
00855                     0b00001000,\par
00856                     0b00001000,\par
00857                     0b00001000,\par
00858                     0b00001000,\par
00859                     0b00001000,\par
00860                     0b00001000,\par
00861                     0b00001000,\par
00862                     0b00001000,\par
00863                     0b00001000,\par
00864                     0b00000000\par
00865 \}\par
00866             \},\par
00867             \{\par
00868                 .c={\cf23 'j'},\par
00869                 .width=8,\par
00870                 .height=16,\par
00871                 .Color = COLOURS::White,\par
00872                 .BMP = \{\par
00873                     0b00000000,\par
00874                     0b00000000,\par
00875                     0b00001000,\par
00876                     0b00001000,\par
00877                     0b00000000,\par
00878                     0b00001000,\par
00879                     0b00001000,\par
00880                     0b00001000,\par
00881                     0b00001000,\par
00882                     0b00001000,\par
00883                     0b00001000,\par
00884                     0b00001000,\par
00885                     0b00001000,\par
00886                     0b00001000,\par
00887                     0b01110000,\par
00888                     0b00000000\par
00889 \}\par
00890             \}, \{\par
00891 \par
00892                 .c ={\cf23 'k'},\par
00893                 .width=8,\par
00894                 .height=16,\par
00895                 .Color=COLOURS::White,\par
00896                 .BMP = \{\par
00897                     0b00000000,\par
00898                     0b01000000,\par
00899                     0b01000000,\par
00900                     0b01000000,\par
00901                     0b01000000,\par
00902                     0b01000000,\par
00903                     0b01000010,\par
00904                     0b01000010,\par
00905                     0b01000010,\par
00906                     0b01000100,\par
00907                     0b01111000,\par
00908                     0b01000100,\par
00909                     0b01000010,\par
00910                     0b01000010,\par
00911                     0b01000010,\par
00912                     0b00000000\par
00913 \}\par
00914             \},\par
00915             \{\par
00916                 .c={\cf23 'l'},\par
00917                 .width=8,\par
00918                 .height=16,\par
00919                 .Color=COLOURS::White,\par
00920                 .BMP = \{\par
00921                     0b00000000,\par
00922                     0b00001000,\par
00923                     0b00001000,\par
00924                     0b00001000,\par
00925                     0b00001000,\par
00926                     0b00001000,\par
00927                     0b00001000,\par
00928                     0b00001000,\par
00929                     0b00001000,\par
00930                     0b00001000,\par
00931                     0b00001000,\par
00932                     0b00001000,\par
00933                     0b00001000,\par
00934                     0b00001000,\par
00935                     0b00000110,\par
00936                     0b00000000\par
00937 \}\par
00938             \},\par
00939             \{\par
00940                 .c ={\cf23 'm'},\par
00941                 .width=8,\par
00942                 .height=16,\par
00943                 .Color=COLOURS::White,\par
00944                 .BMP = \{\par
00945                     0b00000000,\par
00946                     0b00000000,\par
00947                     0b00000000,\par
00948                     0b00000000,\par
00949                     0b00000000,\par
00950                     0b00000000,\par
00951                     0b00110100,\par
00952                     0b01001010,\par
00953                     0b01001010,\par
00954                     0b01001010,\par
00955                     0b01001010,\par
00956                     0b01001010,\par
00957                     0b01001010,\par
00958                     0b01001010,\par
00959                     0b01001010,\par
00960                     0b00000000\par
00961 \}\par
00962             \},\par
00963             \{\par
00964                 .c={\cf23 'n'},\par
00965                 .width=8,\par
00966                 .height=16,\par
00967                 .Color=COLOURS::White,\par
00968                 .BMP = \{\par
00969                     0b0,\par
00970                     0b0,\par
00971                     0b0,\par
00972                     0b0,\par
00973                     0b0,\par
00974                     0b0,\par
00975                     0b0,\par
00976                     0b0,\par
00977                     0b01111100,\par
00978                     0b01000010,\par
00979                     0b01000010,\par
00980                     0b01000010,\par
00981                     0b01000010,\par
00982                     0b01000010,\par
00983                     0b01000010,\par
00984                     0b00000000\par
00985 \}\par
00986             \},\par
00987             \{\par
00988                 .c={\cf23 'o'},\par
00989                 .width=8,\par
00990                 .height=16,\par
00991                 .Color=COLOURS::White,\par
00992                 .BMP = \{\par
00993                     0b0,\par
00994                     0b0,\par
00995                     0b0,\par
00996                     0b0,\par
00997                     0b0,\par
00998                     0b0,\par
00999                     0b0,\par
01000                     0b0,\par
01001                     0b0,\par
01002                     0b00111100,\par
01003                     0b01000010,\par
01004                     0b01000010,\par
01005                     0b01000010,\par
01006                     0b01000010,\par
01007                     0b00111100,\par
01008                     0b00000000\par
01009 \}\par
01010             \}\par
01011 \par
01012 \par
01013         \};\par
01014 \par
01015 \par
01016         {\cf18 int} TranslationTable[256] = \{ \par
01017             0,          {\cf20 //\\0}\par
01018             -1,         {\cf20 //}\par
01019             -1,         {\cf20 //}\par
01020             -1,         {\cf20 //}\par
01021             -1,         {\cf20 //}\par
01022             -1,         {\cf20 //}\par
01023             -1,         {\cf20 //}\par
01024             -1,         {\cf20 //}\par
01025             -1,         {\cf20 //}\par
01026             -1,         {\cf20 //}\par
01027             -1,         {\cf20 //}\par
01028             -1,         {\cf20 //}\par
01029             -1,         {\cf20 //}\par
01030             -1,         {\cf20 //}\par
01031             -1,         {\cf20 //}\par
01032             -1,         {\cf20 //}\par
01033             -1,         {\cf20 //}\par
01034             -1,         {\cf20 //}\par
01035             -1,         {\cf20 //}\par
01036             -1,         {\cf20 //}\par
01037             -1,         {\cf20 //}\par
01038             -1,         {\cf20 //}\par
01039             -1,         {\cf20 //}\par
01040             -1,         {\cf20 //}\par
01041             -1,         {\cf20 //}\par
01042             -1,         {\cf20 //}\par
01043             -1,         {\cf20 //}\par
01044             -1,         {\cf20 //}\par
01045             -1,         {\cf20 //}\par
01046             -1,         {\cf20 //}\par
01047             -1,         {\cf20 //}\par
01048             -1,         {\cf20 //}\par
01049             -1,         {\cf20 //}\par
01050             -1,         {\cf20 //}\par
01051             -1,         {\cf20 //}\par
01052             -1,         {\cf20 //}\par
01053             -1,         {\cf20 //}\par
01054             -1,         {\cf20 //}\par
01055             -1,         {\cf20 //}\par
01056             -1,         {\cf20 //}\par
01057             -1,         {\cf20 //}\par
01058             -1,         {\cf20 //}\par
01059             -1,         {\cf20 //}\par
01060             -1,         {\cf20 //}\par
01061             -1,         {\cf20 //}\par
01062             -1,         {\cf20 //}\par
01063             -1,         {\cf20 //}\par
01064             -1,         {\cf20 //}\par
01065             -1,         {\cf20 //}\par
01066             -1,         {\cf20 //}\par
01067             -1,         {\cf20 //}\par
01068             -1,         {\cf20 //}\par
01069             -1,         {\cf20 //}\par
01070             -1,         {\cf20 //}\par
01071             -1,         {\cf20 //}\par
01072             -1,         {\cf20 //}\par
01073             -1,         {\cf20 //}\par
01074             -1,         {\cf20 //}\par
01075             -1,         {\cf20 //}\par
01076             -1,         {\cf20 //}\par
01077             -1,         {\cf20 //}\par
01078             -1,         {\cf20 //}\par
01079             -1,         {\cf20 //}\par
01080             -1,         {\cf20 //}\par
01081             -1,         {\cf20 //}\par
01082             1,          {\cf20 //A}\par
01083             2,          {\cf20 //B}\par
01084             3,          {\cf20 //C}\par
01085             4,          {\cf20 //D}\par
01086             5,          {\cf20 //E}\par
01087             6,          {\cf20 //F}\par
01088             7,          {\cf20 //G}\par
01089             8,          {\cf20 //H}\par
01090             9,          {\cf20 //I}\par
01091             10,         {\cf20 //J}\par
01092             11,         {\cf20 //K}\par
01093             12,         {\cf20 //K}\par
01094             13,         {\cf20 //M}\par
01095             14,         {\cf20 //N}\par
01096             15,         {\cf20 //O}\par
01097             16,         {\cf20 //P}\par
01098             17,         {\cf20 //Q}\par
01099             18,         {\cf20 //R}\par
01100             19,         {\cf20 //S}\par
01101             20,         {\cf20 //T}\par
01102             21,         {\cf20 //U}\par
01103             22,         {\cf20 //V}\par
01104             23,         {\cf20 //W}\par
01105             24,         {\cf20 //X}\par
01106             25,         {\cf20 //Y}\par
01107             26,         {\cf20 //Z}\par
01108             -1,         {\cf20 //}\par
01109             -1,         {\cf20 //}\par
01110             -1,         {\cf20 //}\par
01111             -1,         {\cf20 //}\par
01112             -1,         {\cf20 //}\par
01113             -1,         {\cf20 //}\par
01114             27,         {\cf20 //a}\par
01115             28,         {\cf20 //b}\par
01116             29,         {\cf20 //c}\par
01117             30,         {\cf20 //d}\par
01118             31,         {\cf20 //e}\par
01119             32,         {\cf20 //f}\par
01120             33,         {\cf20 //g}\par
01121             34,         {\cf20 //h }\par
01122             35,         {\cf20 //i}\par
01123             36,         {\cf20 //j}\par
01124             37,         {\cf20 //k}\par
01125             38,         {\cf20 //l}\par
01126             39,         {\cf20 //m}\par
01127             40,         {\cf20 //n}\par
01128             41\par
01129         \};\par
01130         {\cf18 void} SimpleDrawChar({\cf18 unsigned} {\cf18 int} x, {\cf18 unsigned} {\cf18 int} y, {\cf18 wchar_t} c)\par
01131         \{\par
01132             {\cf20 //find char in translation table}\par
01133             {\cf17 const} {\cf18 int} index = TranslationTable[{\cf17 static_cast<}{\cf18 unsigned} {\cf18 char}{\cf17 >}(c)];\par
01134             {\cf19 if} (index < 0 || index >= 255) \par
01135             \{\par
01136                 {\cf19 return} SimpleDrawChar(x, y, {\cf23 'A'}); {\cf20 // Invalid character index}\par
01137             \}\par
01138             {\cf17 const} SYSTEM::SUBSYSTEMS::RENDER::SIMPLE::CHAR& character = SimpleFont[index];\par
01139             {\cf20 // Draw the character bitmap to the framebuffer}\par
01140             {\cf19 for} ({\cf18 unsigned} {\cf18 int} row = 0; row < character.height; ++row) \{\par
01141                 {\cf19 for} ({\cf18 unsigned} {\cf18 int} col = 0; col < character.width; ++col) \{\par
01142                     {\cf19 if} (character.BMP[row] & (1 << (character.width - 1 - col))) \{ {\cf20 // Check if the bit is set}\par
01143                         {\cf18 unsigned} {\cf18 int} pixelX = x + col;\par
01144                         {\cf18 unsigned} {\cf18 int} pixelY = y + row;\par
01145                         {\cf19 if} (pixelX < FramebufferWidth && pixelY < FramebufferHeight) \{ {\cf20 // Ensure within bounds}\par
01146                             __assume(FramebufferBase != {\cf17 nullptr});\par
01147                             FramebufferBase[pixelY * PixelsPerScanline + pixelX] = character.Color; {\cf20 // Set pixel color //-V108 //-V3539}\par
01148                         \}\par
01149                     \}\par
01150                 \}\par
01151             \}\par
01152 \par
01153         \}\par
01154         {\cf18 void} SimpleDrawString({\cf17 const} {\cf18 wchar_t}* str, {\cf18 unsigned} {\cf18 int} x, {\cf18 unsigned} {\cf18 int} y)\par
01155         \{\par
01156             {\cf19 if} (str == {\cf17 nullptr}) \{ {\cf19 return}; \}\par
01157             {\cf17 const} {\cf18 size_t} len = STD::strlen(str);\par
01158             {\cf18 unsigned} {\cf18 int} xpos = x;\par
01159             {\cf17 const} {\cf18 unsigned} {\cf18 int} ypos = y;\par
01160             {\cf19 if} (len >= UINT32_MAX) \{\par
01161                 SimpleDrawString(L{\cf22 "String too long"}, x, y);\par
01162                 {\cf19 return};\par
01163             \}\par
01164             {\cf20 //we check beforehand if the string is too long}\par
01165             {\cf19 for} ({\cf18 size_t} i = 0; i < len; i++) \{\par
01166                 {\cf19 if}(str[i]=={\cf23 ' '})\{ {\cf20 //-V3539}\par
01167                     xpos += 10; {\cf20 //-V127}\par
01168 \par
01169 \par
01170                     {\cf19 continue};\par
01171                 \}\par
01172                 SimpleDrawChar(xpos,ypos,str[i]); {\cf20 //-V3539}\par
01173                 xpos += 10; {\cf20 //-V127}\par
01174 \par
01175             \}\par
01176         \}\par
01177     \}\par
01178 \}\par
01179 \par
01180 \par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
SYSTEM_INFO.cpp\par \pard\plain 
{\tc\tcl2 \v SOURCE/SYSTEM_INFO/SYSTEM_INFO.cpp}
{\xe \v SOURCE/SYSTEM_INFO/SYSTEM_INFO.cpp}
{\bkmkstart AAAAAAAAAP}
{\bkmkend AAAAAAAAAP}
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf20 // This is a personal academic project. Dear PVS-Studio, please check it.}\par
00002 \par
00003 {\cf20 // PVS-Studio Static Code Analyzer for C, C++, C#, and Java: https://pvs-studio.com}\par
00004 \par
00005 {\cf21 #include "../../HEADER/SYTEM_INFO/SYSTEM_INFO.h"}\par
00006 {\cf21 #include <HEADER/UTILLITY/UTILLITY_F.h>}\par
00007 {\cf17 namespace }SYSTEM \{\par
00008     {\cf17 namespace }SYSTEM_INFO \{\par
00009         {\cf17 extern} {\cf18 size_t} QueryCPUFrequency();\par
00010         SYSTEM::STARTUP::PAGING::GlobalPageMap GlobalPageMap = \{\};\par
00011         SystemInfo SystemInfo::GLobalInst = SystemInfo();\par
00012         SystemInfo::SystemInfo(SystemInfo&& other)  \{\par
00013             this->cpuCores = STD::move(other.cpuCores);\par
00014             this->installedRam = STD::move(other.installedRam);\par
00015         \}\par
00016         SystemInfo& SystemInfo::operator=(SystemInfo&& other)\par
00017         \{\par
00018             this->cpuCores = STD::move(other.cpuCores);\par
00019             this->installedRam = STD::move(other.installedRam);\par
00020             {\cf19 return} *{\cf17 this};\par
00021         \}\par
00022          {\cf18 void} SystemInfo::InitSystemInfo()\par
00023         \{\par
00024             GLobalInst = SystemInfo();\par
00025             GLobalInst.installedRam = SYSTEM::STARTUP::PAGING::QueryInstalledRam();\par
00026 \par
00027         \}\par
00028 \par
00029           {\cf17 const} SystemInfo& SystemInfo::GetInstance() \{\par
00030              {\cf19 return} GLobalInst;\par
00031          \}\par
00032 \par
00033 \par
00034     \par
00035     \par
00036 \par
00037           {\cf18 size_t} QueryCPUFrequency()\par
00038           \{\par
00039 \par
00040               {\cf19 return} size_t();\par
00041           \}\par
00042 \par
00043     \}\par
00044 \}\par
}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Index\par 
\pard\plain 
{\tc \v Index}
{\field\fldedit {\*\fldinst INDEX \\c2 \\*MERGEFORMAT}{\fldrslt INDEX}}
}
